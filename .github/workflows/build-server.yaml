# build.yml
on:
  # pull_request:
  #   paths:
  #   - desci-server/**
  push:
    paths:
      - .github/workflows/**
      - desci-server/**
      - desci-contracts/**
      - integrationTestRunner.sh
      - docker-compose.test.yml
    branches: # array of glob patterns matching against refs/heads. Optional; defaults to all
      - main # triggers on pushes that contain changes
      - develop
      - demo

name: Build desci-server

# https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html
env:
  AWS_DEFAULT_REGION: us-east-2
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  CONTAINER_IMAGE: desci-server
  DOCKER_BUILDKIT: 1

jobs:
  build-and-test:
    runs-on: blacksmith-4vcpu-ubuntu-2204

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up node
        uses: useblacksmith/setup-node@v5
        with:
          node-version-file: ".nvmrc"
          check-latest: false
          cache: "yarn"
          cache-dependency-path: |
            desci-server/yarn.lock

      # Enable blacksmith docker layer caching
      #- uses: useblacksmith/setup-docker-builder@v1

      - name: Install dependencies (desci-server)
        working-directory: desci-server
        run: yarn install --ignore-engines --frozen-lockfile

      - name: Run tests
        run: |
          SKIP_NODES_LIB=1 ./integrationTestRunner.sh

  build-and-push-images:
    # we build and push for every commit, even if tests pass, that way when tests pass deployment is short (run test + build in parallel)
    name: Build and push images
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: hashicorp/setup-terraform@v1
      - name: Checkout
        uses: actions/checkout@v4

      - uses: prepor/action-aws-iam-authenticator@master
      - run: aws-iam-authenticator version

      - name: Install Kubectl
        run: |
          #$(curl -Ls https://dl.k8s.io/release/stable.txt)
          version=v1.23.6
          echo "using kubectl@$version"
          curl -sLO "https://dl.k8s.io/release/$version/bin/linux/amd64/kubectl" -o kubectl
          chmod +x kubectl
          mv kubectl /usr/local/bin
          mkdir $HOME/.kube
          sudo apt-get update
          sudo apt-get install less
          echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 --decode > $HOME/.kube/config
          aws sts get-caller-identity

      # Enable blacksmith docker layer caching
      #- uses: useblacksmith/setup-docker-builder@v1

      - name: Build and tag the image (DEV)
        if: github.ref == 'refs/heads/develop'
        run: |
          docker build \
            --secret id=SENTRY_AUTH_TOKEN \
            -f desci-server/Dockerfile.ci \
            -t $CONTAINER_IMAGE-dev:${{ github.sha }} \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev \
             ./desci-server

      - name: Build and tag the image (DEMO)
        if: github.ref == 'refs/heads/demo'
        run: |
          docker build \
            --secret id=SENTRY_AUTH_TOKEN \
            -f desci-server/Dockerfile.ci \
            -t $CONTAINER_IMAGE-demo:${{ github.sha }} \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo \
             ./desci-server

      - name: Build and tag the image (PROD)
        if: github.ref == 'refs/heads/main'
        run: |
          docker build \
            --secret id=SENTRY_AUTH_TOKEN \
            -f desci-server/Dockerfile.ci \
            -t $CONTAINER_IMAGE:${{ github.sha }} \
            -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE \
             ./desci-server

      - name: Push (DEV)
        if: github.ref == 'refs/heads/develop'
        run: |
          # Push image to AWS ECR
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker tag $CONTAINER_IMAGE-dev:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:${{ github.sha }}
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:${{ github.sha }}

      - name: Push (DEMO)
        if: github.ref == 'refs/heads/demo'
        run: |
          # Push image to AWS ECR
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker tag $CONTAINER_IMAGE-demo:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:${{ github.sha }}
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:${{ github.sha }}

      - name: Push (PROD)
        if: github.ref == 'refs/heads/main'
        run: |
          # Push image to AWS ECR
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker tag $CONTAINER_IMAGE:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:${{ github.sha }}
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:${{ github.sha }}

  deploy:
    name: Deploy desci-server
    needs:
      - build-and-test
      - build-and-push-images
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      - uses: hashicorp/setup-terraform@v1
      - name: Checkout
        uses: actions/checkout@v4

      - uses: prepor/action-aws-iam-authenticator@master
      - run: aws-iam-authenticator version

      - name: Install Kubectl
        run: |
          #$(curl -Ls https://dl.k8s.io/release/stable.txt)
          version=v1.23.6
          echo "using kubectl@$version"
          curl -sLO "https://dl.k8s.io/release/$version/bin/linux/amd64/kubectl" -o kubectl
          chmod +x kubectl
          mv kubectl /usr/local/bin
          mkdir $HOME/.kube
          sudo apt-get update
          sudo apt-get install less
          echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 --decode > $HOME/.kube/config
          aws sts get-caller-identity

      - name: Deploy to EKS (DEV)
        # uses: steebchen/kubectl@v2.0.0
        if: github.ref == 'refs/heads/develop'
        run: | # defaults to latest kubectl binary version
          kubectl apply -f desci-server/kubernetes/deployment_dev.yaml
          kubectl set image deployment/desci-server-dev desci-server-dev=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:${{ github.sha }} --record
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:${{ github.sha }}
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-dev:latest

      - name: Deploy to EKS (DEMO)
        # uses: steebchen/kubectl@v2.0.0
        if: github.ref == 'refs/heads/demo'
        run: | # defaults to latest kubectl binary version
          kubectl set image deployment/desci-server-demo desci-server-demo=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:${{ github.sha }} --record
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:${{ github.sha }}
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE-demo:latest

      - name: Deploy to EKS (PROD)
        if: github.ref == 'refs/heads/main'
        run: | # defaults to latest kubectl binary version
          kubectl apply -f desci-server/kubernetes/deployment_prod.yaml
          kubectl set image deployment/desci-server desci-server=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:${{ github.sha }} --record
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:${{ github.sha }}
          docker tag $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE:latest

      - name: Verify EKS Deployment (DEV)
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl rollout status deployment/desci-server-dev

      - name: Verify EKS Deployment (DEMO)
        if: github.ref == 'refs/heads/demo'
        run: |
          kubectl rollout status deployment/desci-server-demo

      - name: Verify EKS Deployment (PROD)
        if: github.ref == 'refs/heads/main'
        run: |
          kubectl rollout status deployment/desci-server
