/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IStakeManager {
  export type AbandonedRelayServerConfigStruct = {
    devAddress: string;
    abandonmentDelay: BigNumberish;
    escheatmentDelay: BigNumberish;
  };

  export type AbandonedRelayServerConfigStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    devAddress: string;
    abandonmentDelay: BigNumber;
    escheatmentDelay: BigNumber;
  };

  export type StakeInfoStruct = {
    stake: BigNumberish;
    unstakeDelay: BigNumberish;
    withdrawTime: BigNumberish;
    abandonedTime: BigNumberish;
    keepaliveTime: BigNumberish;
    token: string;
    owner: string;
  };

  export type StakeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    stake: BigNumber;
    unstakeDelay: BigNumber;
    withdrawTime: BigNumber;
    abandonedTime: BigNumber;
    keepaliveTime: BigNumber;
    token: string;
    owner: string;
  };
}

export interface IStakeManagerInterface extends utils.Interface {
  contractName: "IStakeManager";
  functions: {
    "authorizeHubByManager(address)": FunctionFragment;
    "authorizeHubByOwner(address,address)": FunctionFragment;
    "escheatAbandonedRelayStake(address)": FunctionFragment;
    "getAbandonedRelayServerConfig()": FunctionFragment;
    "getBurnAddress()": FunctionFragment;
    "getCreationBlock()": FunctionFragment;
    "getMaxUnstakeDelay()": FunctionFragment;
    "getStakeInfo(address)": FunctionFragment;
    "isRelayEscheatable(address)": FunctionFragment;
    "markRelayAbandoned(address)": FunctionFragment;
    "penalizeRelayManager(address,address,uint256)": FunctionFragment;
    "setBurnAddress(address)": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "setRelayManagerOwner(address)": FunctionFragment;
    "stakeForRelayManager(address,address,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unauthorizeHubByManager(address)": FunctionFragment;
    "unauthorizeHubByOwner(address,address)": FunctionFragment;
    "unlockStake(address)": FunctionFragment;
    "updateRelayKeepaliveTime(address)": FunctionFragment;
    "versionSM()": FunctionFragment;
    "withdrawStake(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorizeHubByManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeHubByOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "escheatAbandonedRelayStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAbandonedRelayServerConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxUnstakeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelayEscheatable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markRelayAbandoned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "penalizeRelayManager",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayManagerOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForRelayManager",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorizeHubByManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorizeHubByOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "unlockStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateRelayKeepaliveTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "versionSM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeHubByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeHubByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escheatAbandonedRelayStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAbandonedRelayServerConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxUnstakeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelayEscheatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markRelayAbandoned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penalizeRelayManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayManagerOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeForRelayManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorizeHubByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorizeHubByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRelayKeepaliveTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "versionSM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "AbandonedRelayManagerStakeEscheated(address,address,address,uint256)": EventFragment;
    "BurnAddressSet(address)": EventFragment;
    "DevAddressSet(address)": EventFragment;
    "HubAuthorized(address,address)": EventFragment;
    "HubUnauthorized(address,address,uint256)": EventFragment;
    "OwnerSet(address,address)": EventFragment;
    "RelayServerAbandoned(address,uint256)": EventFragment;
    "RelayServerKeepalive(address,uint256)": EventFragment;
    "StakeAdded(address,address,address,uint256,uint256)": EventFragment;
    "StakePenalized(address,address,address,uint256)": EventFragment;
    "StakeUnlocked(address,address,uint256)": EventFragment;
    "StakeWithdrawn(address,address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AbandonedRelayManagerStakeEscheated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurnAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HubUnauthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayServerAbandoned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayServerKeepalive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakePenalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
}

export type AbandonedRelayManagerStakeEscheatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { relayManager: string; owner: string; token: string; amount: BigNumber }
>;

export type AbandonedRelayManagerStakeEscheatedEventFilter =
  TypedEventFilter<AbandonedRelayManagerStakeEscheatedEvent>;

export type BurnAddressSetEvent = TypedEvent<[string], { burnAddress: string }>;

export type BurnAddressSetEventFilter = TypedEventFilter<BurnAddressSetEvent>;

export type DevAddressSetEvent = TypedEvent<[string], { devAddress: string }>;

export type DevAddressSetEventFilter = TypedEventFilter<DevAddressSetEvent>;

export type HubAuthorizedEvent = TypedEvent<
  [string, string],
  { relayManager: string; relayHub: string }
>;

export type HubAuthorizedEventFilter = TypedEventFilter<HubAuthorizedEvent>;

export type HubUnauthorizedEvent = TypedEvent<
  [string, string, BigNumber],
  { relayManager: string; relayHub: string; removalTime: BigNumber }
>;

export type HubUnauthorizedEventFilter = TypedEventFilter<HubUnauthorizedEvent>;

export type OwnerSetEvent = TypedEvent<
  [string, string],
  { relayManager: string; owner: string }
>;

export type OwnerSetEventFilter = TypedEventFilter<OwnerSetEvent>;

export type RelayServerAbandonedEvent = TypedEvent<
  [string, BigNumber],
  { relayManager: string; abandonedTime: BigNumber }
>;

export type RelayServerAbandonedEventFilter =
  TypedEventFilter<RelayServerAbandonedEvent>;

export type RelayServerKeepaliveEvent = TypedEvent<
  [string, BigNumber],
  { relayManager: string; keepaliveTime: BigNumber }
>;

export type RelayServerKeepaliveEventFilter =
  TypedEventFilter<RelayServerKeepaliveEvent>;

export type StakeAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    relayManager: string;
    owner: string;
    token: string;
    stake: BigNumber;
    unstakeDelay: BigNumber;
  }
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export type StakePenalizedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    relayManager: string;
    beneficiary: string;
    token: string;
    reward: BigNumber;
  }
>;

export type StakePenalizedEventFilter = TypedEventFilter<StakePenalizedEvent>;

export type StakeUnlockedEvent = TypedEvent<
  [string, string, BigNumber],
  { relayManager: string; owner: string; withdrawTime: BigNumber }
>;

export type StakeUnlockedEventFilter = TypedEventFilter<StakeUnlockedEvent>;

export type StakeWithdrawnEvent = TypedEvent<
  [string, string, string, BigNumber],
  { relayManager: string; owner: string; token: string; amount: BigNumber }
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface IStakeManager extends BaseContract {
  contractName: "IStakeManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escheatAbandonedRelayStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAbandonedRelayServerConfig(
      overrides?: CallOverrides
    ): Promise<[IStakeManager.AbandonedRelayServerConfigStructOutput]>;

    getBurnAddress(overrides?: CallOverrides): Promise<[string]>;

    getCreationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxUnstakeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeInfo(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<
      [IStakeManager.StakeInfoStructOutput, boolean] & {
        stakeInfo: IStakeManager.StakeInfoStructOutput;
        isSenderAuthorizedHub: boolean;
      }
    >;

    isRelayEscheatable(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    markRelayAbandoned(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    penalizeRelayManager(
      relayManager: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDevAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayManagerOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeForRelayManager(
      token: string,
      relayManager: string,
      unstakeDelay: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unauthorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRelayKeepaliveTime(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    versionSM(overrides?: CallOverrides): Promise<[string]>;

    withdrawStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authorizeHubByManager(
    relayHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizeHubByOwner(
    relayManager: string,
    relayHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escheatAbandonedRelayStake(
    relayManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAbandonedRelayServerConfig(
    overrides?: CallOverrides
  ): Promise<IStakeManager.AbandonedRelayServerConfigStructOutput>;

  getBurnAddress(overrides?: CallOverrides): Promise<string>;

  getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxUnstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeInfo(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<
    [IStakeManager.StakeInfoStructOutput, boolean] & {
      stakeInfo: IStakeManager.StakeInfoStructOutput;
      isSenderAuthorizedHub: boolean;
    }
  >;

  isRelayEscheatable(
    relayManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  markRelayAbandoned(
    relayManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  penalizeRelayManager(
    relayManager: string,
    beneficiary: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurnAddress(
    _burnAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDevAddress(
    _burnAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayManagerOwner(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeForRelayManager(
    token: string,
    relayManager: string,
    unstakeDelay: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unauthorizeHubByManager(
    relayHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorizeHubByOwner(
    relayManager: string,
    relayHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockStake(
    relayManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRelayKeepaliveTime(
    relayManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  versionSM(overrides?: CallOverrides): Promise<string>;

  withdrawStake(
    relayManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authorizeHubByManager(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    escheatAbandonedRelayStake(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAbandonedRelayServerConfig(
      overrides?: CallOverrides
    ): Promise<IStakeManager.AbandonedRelayServerConfigStructOutput>;

    getBurnAddress(overrides?: CallOverrides): Promise<string>;

    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxUnstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<
      [IStakeManager.StakeInfoStructOutput, boolean] & {
        stakeInfo: IStakeManager.StakeInfoStructOutput;
        isSenderAuthorizedHub: boolean;
      }
    >;

    isRelayEscheatable(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    markRelayAbandoned(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    penalizeRelayManager(
      relayManager: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAddress(
      _burnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayManagerOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeForRelayManager(
      token: string,
      relayManager: string,
      unstakeDelay: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unauthorizeHubByManager(
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockStake(relayManager: string, overrides?: CallOverrides): Promise<void>;

    updateRelayKeepaliveTime(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    versionSM(overrides?: CallOverrides): Promise<string>;

    withdrawStake(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AbandonedRelayManagerStakeEscheated(address,address,address,uint256)"(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      amount?: null
    ): AbandonedRelayManagerStakeEscheatedEventFilter;
    AbandonedRelayManagerStakeEscheated(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      amount?: null
    ): AbandonedRelayManagerStakeEscheatedEventFilter;

    "BurnAddressSet(address)"(
      burnAddress?: string | null
    ): BurnAddressSetEventFilter;
    BurnAddressSet(burnAddress?: string | null): BurnAddressSetEventFilter;

    "DevAddressSet(address)"(
      devAddress?: string | null
    ): DevAddressSetEventFilter;
    DevAddressSet(devAddress?: string | null): DevAddressSetEventFilter;

    "HubAuthorized(address,address)"(
      relayManager?: string | null,
      relayHub?: string | null
    ): HubAuthorizedEventFilter;
    HubAuthorized(
      relayManager?: string | null,
      relayHub?: string | null
    ): HubAuthorizedEventFilter;

    "HubUnauthorized(address,address,uint256)"(
      relayManager?: string | null,
      relayHub?: string | null,
      removalTime?: null
    ): HubUnauthorizedEventFilter;
    HubUnauthorized(
      relayManager?: string | null,
      relayHub?: string | null,
      removalTime?: null
    ): HubUnauthorizedEventFilter;

    "OwnerSet(address,address)"(
      relayManager?: string | null,
      owner?: string | null
    ): OwnerSetEventFilter;
    OwnerSet(
      relayManager?: string | null,
      owner?: string | null
    ): OwnerSetEventFilter;

    "RelayServerAbandoned(address,uint256)"(
      relayManager?: string | null,
      abandonedTime?: null
    ): RelayServerAbandonedEventFilter;
    RelayServerAbandoned(
      relayManager?: string | null,
      abandonedTime?: null
    ): RelayServerAbandonedEventFilter;

    "RelayServerKeepalive(address,uint256)"(
      relayManager?: string | null,
      keepaliveTime?: null
    ): RelayServerKeepaliveEventFilter;
    RelayServerKeepalive(
      relayManager?: string | null,
      keepaliveTime?: null
    ): RelayServerKeepaliveEventFilter;

    "StakeAdded(address,address,address,uint256,uint256)"(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      stake?: null,
      unstakeDelay?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      stake?: null,
      unstakeDelay?: null
    ): StakeAddedEventFilter;

    "StakePenalized(address,address,address,uint256)"(
      relayManager?: string | null,
      beneficiary?: string | null,
      token?: null,
      reward?: null
    ): StakePenalizedEventFilter;
    StakePenalized(
      relayManager?: string | null,
      beneficiary?: string | null,
      token?: null,
      reward?: null
    ): StakePenalizedEventFilter;

    "StakeUnlocked(address,address,uint256)"(
      relayManager?: string | null,
      owner?: string | null,
      withdrawTime?: null
    ): StakeUnlockedEventFilter;
    StakeUnlocked(
      relayManager?: string | null,
      owner?: string | null,
      withdrawTime?: null
    ): StakeUnlockedEventFilter;

    "StakeWithdrawn(address,address,address,uint256)"(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      relayManager?: string | null,
      owner?: string | null,
      token?: null,
      amount?: null
    ): StakeWithdrawnEventFilter;
  };

  estimateGas: {
    authorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escheatAbandonedRelayStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAbandonedRelayServerConfig(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBurnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxUnstakeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeInfo(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRelayEscheatable(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markRelayAbandoned(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    penalizeRelayManager(
      relayManager: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDevAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayManagerOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeForRelayManager(
      token: string,
      relayManager: string,
      unstakeDelay: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unauthorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRelayKeepaliveTime(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    versionSM(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escheatAbandonedRelayStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAbandonedRelayServerConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBurnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxUnstakeDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRelayEscheatable(
      relayManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markRelayAbandoned(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    penalizeRelayManager(
      relayManager: string,
      beneficiary: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDevAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayManagerOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeForRelayManager(
      token: string,
      relayManager: string,
      unstakeDelay: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unauthorizeHubByManager(
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorizeHubByOwner(
      relayManager: string,
      relayHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRelayKeepaliveTime(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    versionSM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawStake(
      relayManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
