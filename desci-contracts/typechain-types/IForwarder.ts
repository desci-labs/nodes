/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IForwarder {
  export type ForwardRequestStruct = {
    from: string;
    to: string;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
    validUntilTime: BigNumberish;
  };

  export type ForwardRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    from: string;
    to: string;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
    validUntilTime: BigNumber;
  };
}

export interface IForwarderInterface extends utils.Interface {
  contractName: "IForwarder";
  functions: {
    "execute((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "registerDomainSeparator(string,string)": FunctionFragment;
    "registerRequestType(string,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "verify((address,address,uint256,uint256,uint256,bytes,uint256),bytes32,bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execute",
    values: [
      IForwarder.ForwardRequestStruct,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerDomainSeparator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRequestType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      IForwarder.ForwardRequestStruct,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRequestType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "DomainRegistered(bytes32,bytes)": EventFragment;
    "RequestTypeRegistered(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DomainRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestTypeRegistered"): EventFragment;
}

export type DomainRegisteredEvent = TypedEvent<
  [string, string],
  { domainSeparator: string; domainValue: string }
>;

export type DomainRegisteredEventFilter =
  TypedEventFilter<DomainRegisteredEvent>;

export type RequestTypeRegisteredEvent = TypedEvent<
  [string, string],
  { typeHash: string; typeStr: string }
>;

export type RequestTypeRegisteredEventFilter =
  TypedEventFilter<RequestTypeRegisteredEvent>;

export interface IForwarder extends BaseContract {
  contractName: "IForwarder";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  execute(
    forwardRequest: IForwarder.ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  registerDomainSeparator(
    name: string,
    version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRequestType(
    typeName: string,
    typeSuffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify(
    forwardRequest: IForwarder.ForwardRequestStruct,
    domainSeparator: BytesLike,
    requestTypeHash: BytesLike,
    suffixData: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    execute(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; ret: string }>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DomainRegistered(bytes32,bytes)"(
      domainSeparator?: BytesLike | null,
      domainValue?: null
    ): DomainRegisteredEventFilter;
    DomainRegistered(
      domainSeparator?: BytesLike | null,
      domainValue?: null
    ): DomainRegisteredEventFilter;

    "RequestTypeRegistered(bytes32,string)"(
      typeHash?: BytesLike | null,
      typeStr?: null
    ): RequestTypeRegisteredEventFilter;
    RequestTypeRegistered(
      typeHash?: BytesLike | null,
      typeStr?: null
    ): RequestTypeRegisteredEventFilter;
  };

  estimateGas: {
    execute(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDomainSeparator(
      name: string,
      version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRequestType(
      typeName: string,
      typeSuffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      forwardRequest: IForwarder.ForwardRequestStruct,
      domainSeparator: BytesLike,
      requestTypeHash: BytesLike,
      suffixData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
