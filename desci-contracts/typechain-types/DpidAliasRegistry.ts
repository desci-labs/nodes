/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DpidAliasRegistry {
  export type LegacyVersionStruct = { cid: string; timestamp: BigNumberish };

  export type LegacyVersionStructOutput = [string, BigNumber] & {
    cid: string;
    timestamp: BigNumber;
  };

  export type LegacyDpidEntryStruct = {
    owner: string;
    versions: DpidAliasRegistry.LegacyVersionStruct[];
  };

  export type LegacyDpidEntryStructOutput = [
    string,
    DpidAliasRegistry.LegacyVersionStructOutput[]
  ] & {
    owner: string;
    versions: DpidAliasRegistry.LegacyVersionStructOutput[];
  };
}

export interface DpidAliasRegistryInterface extends utils.Interface {
  contractName: "DpidAliasRegistry";
  functions: {
    "__DpidAliasRegistry_init(uint256)": FunctionFragment;
    "_firstDpid()": FunctionFragment;
    "importLegacyDpid(uint256,(address,(string,uint256)[]))": FunctionFragment;
    "legacy(uint256)": FunctionFragment;
    "legacyLookup(uint256)": FunctionFragment;
    "lookup(uint256)": FunctionFragment;
    "mintDpid(string)": FunctionFragment;
    "nextDpid()": FunctionFragment;
    "owner()": FunctionFragment;
    "registry(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeDpid(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__DpidAliasRegistry_init",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_firstDpid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "importLegacyDpid",
    values: [BigNumberish, DpidAliasRegistry.LegacyDpidEntryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "legacy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintDpid", values: [string]): string;
  encodeFunctionData(functionFragment: "nextDpid", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeDpid",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "__DpidAliasRegistry_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_firstDpid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "importLegacyDpid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "legacy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacyLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintDpid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextDpid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeDpid",
    data: BytesLike
  ): Result;

  events: {
    "DpidMinted(uint256,string)": EventFragment;
    "ImportedDpid(uint256,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpgradedDpid(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DpidMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImportedDpid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradedDpid"): EventFragment;
}

export type DpidMintedEvent = TypedEvent<
  [BigNumber, string],
  { dpid: BigNumber; streamID: string }
>;

export type DpidMintedEventFilter = TypedEventFilter<DpidMintedEvent>;

export type ImportedDpidEvent = TypedEvent<
  [BigNumber, DpidAliasRegistry.LegacyDpidEntryStructOutput],
  { dpid: BigNumber; entry: DpidAliasRegistry.LegacyDpidEntryStructOutput }
>;

export type ImportedDpidEventFilter = TypedEventFilter<ImportedDpidEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedDpidEvent = TypedEvent<
  [BigNumber, string],
  { dpid: BigNumber; streamId: string }
>;

export type UpgradedDpidEventFilter = TypedEventFilter<UpgradedDpidEvent>;

export interface DpidAliasRegistry extends BaseContract {
  contractName: "DpidAliasRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DpidAliasRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __DpidAliasRegistry_init(
      firstDpid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _firstDpid(overrides?: CallOverrides): Promise<[BigNumber]>;

    importLegacyDpid(
      dpid: BigNumberish,
      entry: DpidAliasRegistry.LegacyDpidEntryStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    legacy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    legacyLookup(
      dpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DpidAliasRegistry.LegacyDpidEntryStructOutput]>;

    lookup(dpid: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    mintDpid(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextDpid(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeDpid(
      dpid: BigNumberish,
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __DpidAliasRegistry_init(
    firstDpid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _firstDpid(overrides?: CallOverrides): Promise<BigNumber>;

  importLegacyDpid(
    dpid: BigNumberish,
    entry: DpidAliasRegistry.LegacyDpidEntryStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  legacy(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  legacyLookup(
    dpid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DpidAliasRegistry.LegacyDpidEntryStructOutput>;

  lookup(dpid: BigNumberish, overrides?: CallOverrides): Promise<string>;

  mintDpid(
    streamId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextDpid(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeDpid(
    dpid: BigNumberish,
    streamId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __DpidAliasRegistry_init(
      firstDpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _firstDpid(overrides?: CallOverrides): Promise<BigNumber>;

    importLegacyDpid(
      dpid: BigNumberish,
      entry: DpidAliasRegistry.LegacyDpidEntryStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    legacy(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    legacyLookup(
      dpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DpidAliasRegistry.LegacyDpidEntryStructOutput>;

    lookup(dpid: BigNumberish, overrides?: CallOverrides): Promise<string>;

    mintDpid(streamId: string, overrides?: CallOverrides): Promise<BigNumber>;

    nextDpid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeDpid(
      dpid: BigNumberish,
      streamId: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DpidMinted(uint256,string)"(
      dpid?: null,
      streamID?: null
    ): DpidMintedEventFilter;
    DpidMinted(dpid?: null, streamID?: null): DpidMintedEventFilter;

    "ImportedDpid(uint256,tuple)"(
      dpid?: null,
      entry?: null
    ): ImportedDpidEventFilter;
    ImportedDpid(dpid?: null, entry?: null): ImportedDpidEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "UpgradedDpid(uint256,string)"(
      dpid?: null,
      streamId?: null
    ): UpgradedDpidEventFilter;
    UpgradedDpid(dpid?: null, streamId?: null): UpgradedDpidEventFilter;
  };

  estimateGas: {
    __DpidAliasRegistry_init(
      firstDpid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _firstDpid(overrides?: CallOverrides): Promise<BigNumber>;

    importLegacyDpid(
      dpid: BigNumberish,
      entry: DpidAliasRegistry.LegacyDpidEntryStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    legacy(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    legacyLookup(
      dpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lookup(dpid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    mintDpid(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextDpid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeDpid(
      dpid: BigNumberish,
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __DpidAliasRegistry_init(
      firstDpid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _firstDpid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    importLegacyDpid(
      dpid: BigNumberish,
      entry: DpidAliasRegistry.LegacyDpidEntryStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    legacy(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacyLookup(
      dpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lookup(
      dpid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintDpid(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextDpid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeDpid(
      dpid: BigNumberish,
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
