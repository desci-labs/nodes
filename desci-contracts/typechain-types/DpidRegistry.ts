/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DpidRegistryInterface extends utils.Interface {
  contractName: "DpidRegistry";
  functions: {
    "exists(bytes32,uint256)": FunctionFragment;
    "get(bytes32,uint256)": FunctionFragment;
    "getFee()": FunctionFragment;
    "getOrgFee()": FunctionFragment;
    "getOrganization(bytes32)": FunctionFragment;
    "initialize()": FunctionFragment;
    "organizations(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "put(bytes32,uint256)": FunctionFragment;
    "registerOrg(bytes32)": FunctionFragment;
    "registerOrgWithGate(bytes32,address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setOrgFee(uint256)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateOrg(bytes32,address[])": FunctionFragment;
    "validateCharacters(bytes32)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exists",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOrgFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "put",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOrg",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOrgWithGate",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrgFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrg",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCharacters",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrgFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "put", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOrgWithGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOrgFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateOrg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateCharacters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Register(bytes32,uint256)": EventFragment;
    "RegisterOrganization(bytes32,address,address[])": EventFragment;
    "UpdateOrganization(bytes32,address,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterOrganization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOrganization"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RegisterEvent = TypedEvent<
  [string, BigNumber],
  { prefix: string; entryId: BigNumber }
>;

export type RegisterEventFilter = TypedEventFilter<RegisterEvent>;

export type RegisterOrganizationEvent = TypedEvent<
  [string, string, string[]],
  { prefix: string; registrant: string; tokenGate: string[] }
>;

export type RegisterOrganizationEventFilter =
  TypedEventFilter<RegisterOrganizationEvent>;

export type UpdateOrganizationEvent = TypedEvent<
  [string, string, string[]],
  { prefix: string; registrant: string; tokenGate: string[] }
>;

export type UpdateOrganizationEventFilter =
  TypedEventFilter<UpdateOrganizationEvent>;

export interface DpidRegistry extends BaseContract {
  contractName: "DpidRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DpidRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exists(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    get(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrgFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOrganization(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    organizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        prefix: string;
        registrant: string;
        count: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    put(
      prefix: BytesLike,
      entry: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerOrg(
      prefix: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerOrgWithGate(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOrgFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrg(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateCharacters(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  exists(
    prefix: BytesLike,
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  get(
    prefix: BytesLike,
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOrgFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOrganization(
    prefix: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  organizations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      prefix: string;
      registrant: string;
      count: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  put(
    prefix: BytesLike,
    entry: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerOrg(
    prefix: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerOrgWithGate(
    prefix: BytesLike,
    tokenGate: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    gweiFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOrgFee(
    gweiFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrg(
    prefix: BytesLike,
    tokenGate: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateCharacters(
    prefix: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exists(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    get(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOrgFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOrganization(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    initialize(overrides?: CallOverrides): Promise<void>;

    organizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        prefix: string;
        registrant: string;
        count: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    put(
      prefix: BytesLike,
      entry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerOrg(prefix: BytesLike, overrides?: CallOverrides): Promise<void>;

    registerOrgWithGate(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(gweiFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setOrgFee(gweiFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOrg(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    validateCharacters(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Register(bytes32,uint256)"(
      prefix?: null,
      entryId?: null
    ): RegisterEventFilter;
    Register(prefix?: null, entryId?: null): RegisterEventFilter;

    "RegisterOrganization(bytes32,address,address[])"(
      prefix?: null,
      registrant?: null,
      tokenGate?: null
    ): RegisterOrganizationEventFilter;
    RegisterOrganization(
      prefix?: null,
      registrant?: null,
      tokenGate?: null
    ): RegisterOrganizationEventFilter;

    "UpdateOrganization(bytes32,address,address[])"(
      prefix?: null,
      registrant?: null,
      tokenGate?: null
    ): UpdateOrganizationEventFilter;
    UpdateOrganization(
      prefix?: null,
      registrant?: null,
      tokenGate?: null
    ): UpdateOrganizationEventFilter;
  };

  estimateGas: {
    exists(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOrgFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOrganization(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    organizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    put(
      prefix: BytesLike,
      entry: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerOrg(
      prefix: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerOrgWithGate(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOrgFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrg(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateCharacters(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exists(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      prefix: BytesLike,
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrgFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrganization(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    organizations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    put(
      prefix: BytesLike,
      entry: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerOrg(
      prefix: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerOrgWithGate(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOrgFee(
      gweiFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrg(
      prefix: BytesLike,
      tokenGate: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateCharacters(
      prefix: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
