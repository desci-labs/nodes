//SPDX-License-Identifier: BSD-4-Clause
pragma solidity ^0.8.0;

import "hardhat/console.sol";

import "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol";
import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-solidity/contracts/access/Ownable.sol";
import "openzeppelin-solidity/contracts/utils/structs/EnumerableMap.sol";
import "openzeppelin-solidity/contracts/utils/structs/EnumerableSet.sol";

import "./VersionedERC721.sol";
import "./ResearchObject.sol";

contract Prize is Ownable, VersionedERC721 {
    using EnumerableMap for EnumerableMap.AddressToUintMap;
    using EnumerableSet for EnumerableSet.AddressSet;
    address public _researchObjectContract;
    uint256 public _count;
    /**
     Prizes are a collection of Ether and whitelisted ERC-20 deposits.

     A holder of a DeSci Labs Prize token has custody of a non-transferable receipt of their individual deposits on a Research Object.
     These deposits are refundable under specific conditions:

        1) The Prize has not been marked "assigned" by the appointed ARC
           and
        2) The Prize has not been marked "completed" by the appointed ARC

        Note!   An ARC may impose their own conditions for release of funds, 
                including but not limited to: taking a partial or full fee, 
                marking a Prize as "completed", or marking a Prize as "assigned" at ARC discretion.

                Minting a Prize is subject to the DeSci Labs AG / DeSci Labs Ltd. Terms of Service and Protocol Disclaimer.
                Depositing funds as a Prize also confirms your agreement to the appointed ARC's terms.
     */
    mapping(uint256 => EnumerableMap.AddressToUintMap) internal _prizes;
    /**
        Each Prize is appointed an ARC upon mint
     */
    mapping(uint256 => address) public _arcs;
    /**
        ARCs assign a Research Object to an entity who performs the work
     */
    mapping(uint256 => address) public _assignments;
    mapping(uint256 => bool) public _completions;
    /**
        A Prize can belong to one Research Object. The Research Object may be changed under certain conditions:
        1) The Prize cannot currently be Assigned.
    */
    mapping(uint256 => uint256) public _researchObjects;

    EnumerableSet.AddressSet internal _tokenWhitelist;

    constructor(
        string memory name,
        string memory symbol,
        address researchObjectContract,
        address[] memory tokenWhitelist
    ) VersionedERC721(name, symbol) {
        _researchObjectContract = researchObjectContract;
        approveForWhitelist(tokenWhitelist);
    }

    /** Minting */
    function mint(bytes memory url) public {
        address to = _msgSender();
        mintFor(to, url);
    }

    // Allow for minting on someone's behalf, as token is not transferable
    function mintFor(address to, bytes memory url) public {
        uint256 tokenId = _count++;
        _safeMint(to, tokenId);
        updateMetadata(tokenId, url);
    }

    // TODO:FIXME: add prize minting with batch approve and batch deposit
    function mintWithPrize(
        bytes memory url,
        address[] memory tokenAddresses,
        uint256[] memory amounts
    ) public payable {
        mint(url);
        depositPrize(_count - 1, tokenAddresses, amounts);
    }

    function getPrizeBalances(uint256 tokenId)
        public
        view
        validToken(tokenId)
        returns (address[] memory, uint256[] memory)
    {
        EnumerableMap.AddressToUintMap storage prize = _prizes[tokenId];
        // Q: I know this is view but does storing len outside loop optimize gas? ...asking for a fren :)
        uint256 len = prize.length();

        address[] memory tokenContract = new address[](len);
        uint256[] memory amounts = new uint256[](len);

        for (uint256 i = 0; i < len; i++) {
            (tokenContract[i], amounts[i]) = prize.at(i);
        }

        return (tokenContract, amounts);
    }

    /** Privileged Functions */

    // The owner can assign the prize
    function assignPrizeCandidate(uint256 tokenId, address to)
        public
        onlyOwner
        onlyIncomplete(tokenId)
    {
        _assignments[tokenId] = to;
    }

    // The owner can allow the prize to be redeemed upon success by marking complete
    function setPrizeCompletion(uint256 tokenId, bool status)
        public
        onlyOwner
        onlyAssigned(tokenId)
        onlyIncomplete(tokenId)
    {
        _completions[tokenId] = status;
    }

    function approveForWhitelist(address[] memory tokenContracts)
        public
        onlyOwner
    {
        for (uint256 i = 0; i < tokenContracts.length; i++) {
            // Note: Not checking if token address is valid ERC-20 to save gas
            // an invalid/malicious ERC-20 address can always be revoked later
            _tokenWhitelist.add(tokenContracts[i]);
        }
    }

    function revokeFromWhitelist(address[] memory tokenContracts)
        public
        onlyOwner
    {
        for (uint256 i = 0; i < tokenContracts.length; i++) {
            _tokenWhitelist.remove(tokenContracts[i]);
        }
    }

    function setResearchObjectContract(address researchObjectContract)
        public
        onlyOwner
    {
        _researchObjectContract = researchObjectContract;
    }

    /** Deposits */
    function depositPrize(
        uint256 tokenId,
        address[] memory tokenAddresses,
        uint256[] memory amounts
    )
        public
        payable
        isObjectHolder(tokenId)
        onlyIncomplete(tokenId)
        isWhitelisted(tokenAddresses)
    {
        require(
            tokenAddresses.length == amounts.length,
            "Prize array mismatch"
        );
        uint256 etherValue = msg.value;
        // TODO: gas optimize by staging the entire update to _prizes[tokenId] in a local variable and updating once vs setting each token balance individually

        // ADD new deposit to existing prizes, if any
        // if Ether was sent, update balance
        if (etherValue > 0) {
            // solidity 0.8+ does overflow checking
            uint256 newBalance = etherValue;
            if (_prizes[tokenId].contains(address(0))) {
                newBalance = _prizes[tokenId].get(address(0)) + etherValue;
            }
            _prizes[tokenId].set(address(0), newBalance);
        }

        // If ERC-20 was sent, update balances
        for (uint256 i = 0; i < tokenAddresses.length; i++) {
            address tokenAddress = tokenAddresses[i];
            uint256 amount = amounts[i];

            if (amount > 0) {
                uint256 newBalance = amount;
                if (_prizes[tokenId].contains(tokenAddress)) {
                    newBalance = _prizes[tokenId].get(tokenAddress) + amount;
                }
                _prizes[tokenId].set(tokenAddress, newBalance);

                // process ERC-20 transfer
                ERC20 token = ERC20(tokenAddress);
                // transfer from sender to this contract, requires approval
                token.transferFrom(_msgSender(), address(this), amount);
            }
        }
    }

    /** Withdrawals */
    // Object holder can request refund
    function refundPrize(uint256 tokenId, address tokenAddress)
        public
        isObjectHolder(tokenId)
        onlyUnassigned(tokenId)
        onlyIncomplete(tokenId)
    {
        address payable receiver = payable(_msgSender());
        uint256 amount = _prizes[tokenId].get(tokenAddress);
        _withdrawPrize(tokenId, tokenAddress, receiver, amount);
    }

    // Object holder can request refund for all ETH and ERC20
    function refundPrizeAll(uint256 tokenId)
        public
        isObjectHolder(tokenId)
        onlyUnassigned(tokenId)
        onlyIncomplete(tokenId)
    {
        EnumerableMap.AddressToUintMap storage prizesForObject = _prizes[
            tokenId
        ];

        uint256 len = prizesForObject.length();

        for (uint256 i = 0; i < len; i++) {
            (address tokenAddress, ) = prizesForObject.at(i);
            refundPrize(tokenId, tokenAddress);
        }
    }

    // if the replication is approved and completed, allow the worker to collect their prize
    function collectPrize(uint256 tokenId, address tokenAddress)
        public
        isAssignee(tokenId)
        onlyComplete(tokenId)
    {
        address payable receiver = payable(_msgSender());
        uint256 amount = _prizes[tokenId].get(tokenAddress);
        _withdrawPrize(tokenId, tokenAddress, receiver, amount);
    }

    // if the replication is approved and completed, allow the worker to collect their prize for all ETH and ERC20
    function collectPrizeAll(uint256 tokenId)
        public
        isAssignee(tokenId)
        onlyComplete(tokenId)
    {
        EnumerableMap.AddressToUintMap storage prizesForObject = _prizes[
            tokenId
        ];

        uint256 len = prizesForObject.length();

        for (uint256 i = 0; i < len; i++) {
            (address tokenAddress, ) = prizesForObject.at(i);
            collectPrize(tokenId, tokenAddress);
        }
    }

    // internal handling of transfers in ETH or ERC20
    function _withdrawPrize(
        uint256 tokenId,
        address tokenAddress,
        address payable receiver,
        uint256 amount
    ) private {
        uint256 balance = _prizes[tokenId].get(tokenAddress);
        require(amount <= balance, "Amount too high");
        uint256 newBalance = balance - amount;

        // don't throw error if amount <= 0, simply skip transfer
        if (amount > 0) {
            // optional cleanup step: remove token from list if new amount is 0
            if (newBalance == 0) {
                _prizes[tokenId].remove(tokenAddress);
            } else {
                _prizes[tokenId].set(tokenAddress, newBalance);
            }

            if (tokenAddress == address(0)) {
                // ETH requested
                receiver.transfer(amount);
            } else {
                // ERC20 requested
                ERC20 token = ERC20(tokenAddress);
                // transfer from this contract to requestor
                token.transfer(receiver, amount);
            }
        }
    }

    /** Modifiers */
    modifier onlyUnassigned(uint256 tokenId) {
        require(_assignments[tokenId] == address(0), "Must be unassigned");
        _;
    }
    modifier onlyAssigned(uint256 tokenId) {
        require(_assignments[tokenId] == address(0), "Must be assigned");
        _;
    }
    modifier onlyIncomplete(uint256 tokenId) {
        require(_completions[tokenId] == false, "Must be incomplete");
        _;
    }
    modifier onlyComplete(uint256 tokenId) {
        require(_completions[tokenId] == false, "Must be complete");
        _;
    }
    modifier isAssignee(uint256 tokenId) {
        require(_assignments[tokenId] == _msgSender(), "Must be assignee");
        _;
    }
    modifier isObjectHolder(uint256 tokenId) {
        require(ownerOf(tokenId) == _msgSender(), "Must hold object token");
        _;
    }
    modifier isWhitelisted(address[] memory tokenAddresses) {
        for (uint256 i = 0; i < tokenAddresses.length; i++) {
            address tok = tokenAddresses[i];
            require(_tokenWhitelist.contains(tok), "Token not whitelisted");
        }
        _;
    }
    modifier validResearchObject(uint256 tokenId) {
        ResearchObject researchObject = ResearchObject(_researchObjectContract);
        require(researchObject.exists(tokenId), "Invalid ID");
        _;
    }

    /** Overrides */
    // Non-transferable ERC721
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        require(address(0) == from, "No transfers");
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
