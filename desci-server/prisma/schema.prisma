generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Node {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  title                String
  cid                  String                 @default("")
  state                NodeState              @default(NEW)
  isFeatured           Boolean                @default(false)
  manifestUrl          String
  restBody             Json                   @default("{}")
  replicationFactor    Int
  ownerId              Int
  uuid                 String?                @unique @default(uuid())
  manifestDocumentId   String                 @default("")
  owner                User                   @relation(fields: [ownerId], references: [id])
  noveltyScoreConfig   Json?
  authorInvites        AuthorInvite[]
  transactions         ChainTransaction[]
  interactionLogs      InteractionLog[]
  authors              NodeAuthor[]
  versions             NodeVersion[]
  votes                NodeVote[]
  DataReference        DataReference[]
  PublicDataReference  PublicDataReference[]
  CidPruneList         CidPruneList[]
  NodeCover            NodeCover[]
  isDeleted            Boolean                @default(false)
  deletedAt            DateTime?
  UploadJobs           UploadJobs[]
  DraftNodeTree        DraftNodeTree[]
  ceramicStream        String?
  NodeAttestation      NodeAttestation[]
  NodeThumbnails       NodeThumbnails[]
  PublishTaskQueue     PublishTaskQueue[]
  NodeContribution     NodeContribution[]
  PrivateShare         PrivateShare[]
  OrcidPutCodes        OrcidPutCodes[]
  DistributionPdfs     DistributionPdfs[]
  PdfPreviews          PdfPreviews[]
  DoiRecord            DoiRecord[]
  dpidAlias            Int?
  DoiSubmissionQueue   DoiSubmissionQueue[]
  BookmarkedNode       BookmarkedNode[]
  DeferredEmails       DeferredEmails[]
  UserNotifications    UserNotifications[]
  Annotation           Annotation[]
  PublishStatus        PublishStatus[]
  ExternalPublications ExternalPublications[]
  CommunityRadarEntry  CommunityRadarEntry[]
  NodeLike             NodeLike[]
  CommunitySubmission  CommunitySubmission[]
  PublishedWallet      PublishedWallet[]
  GuestDataReference   GuestDataReference[]
  DataMigration        DataMigration[]
  dataMigrationId      Int?

  @@index([ownerId])
  @@index([uuid])
}

model NodeVersion {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  manifestUrl         String
  cid                 String                @default("")
  transactionId       String?
  commitId            String?
  nodeId              Int?
  node                Node?                 @relation(fields: [nodeId], references: [id])
  PublicDataReference PublicDataReference[]
  DataReference       DataReference[]
  PublishStatus       PublishStatus[]
}

model InteractionLog {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ip         String?
  userAgent  String?
  extra      String?
  action     ActionType?
  userId     Int?
  isGuest    Boolean? // True = Guest, False = User, Null = Not logged
  rep        Int?
  nodeId     Int?
  waitlistId Int?
  node       Node?       @relation(fields: [nodeId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  waitlist   Waitlist?   @relation(fields: [waitlistId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model AuthToken {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  accessToken  String?
  refreshToken String?
  expiresIn    Int?
  tokenId      String?
  source       AuthTokenSource?
  userId       Int
  user         User             @relation(fields: [userId], references: [id])
}

model Waitlist {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique
  userId          Int?
  user            User?            @relation(fields: [userId], references: [id])
  interactionLogs InteractionLog[]
}

model Wallet {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  address         String
  network         String?
  chainId         String?
  msgSignature    String?
  msgPlain        String?
  userId          Int?
  nickname        String?
  giftTransaction String?
  usedFaucet      Boolean? @default(false)
  user            User?    @relation(fields: [userId], references: [id])

  @@index([address])
  @@index([userId])
}

// This table is used to store the public key of the wallet that was used to publish a node,
// it does not focus on associated wallets, just any wallet that was used to publish a node,
// to help users figure out which method they used to publish a node in the past.
model PublishedWallet {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  pubKey    String
  userId    Int
  nodeUuid  String
  provider  WalletProvider
  user      User           @relation(fields: [userId], references: [id])
  node      Node           @relation(fields: [nodeUuid], references: [uuid])

  @@unique([pubKey, nodeUuid, provider])
  @@index([userId])
  @@index([nodeUuid])
}

model User {
  id                          Int                           @id @default(autoincrement())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  isGuest                     Boolean                       @default(false)
  email                       String                        @unique
  phoneNumber                 String?                       @unique
  name                        String?
  website                     String?
  googleScholarUrl            String?
  researchInterests           String?
  gitcoinPassport             String?                       @unique
  walletAddress               String?                       @unique
  isPatron                    Boolean                       @default(false)
  isWarden                    Boolean                       @default(false)
  isKeeper                    Boolean                       @default(false)
  pseudonym                   String?                       @unique
  orcid                       String?                       @unique
  notificationSettings        Json?
  unseenNotificationCount     Int                           @default(0)
  convertedGuest              Boolean                       @default(false)
  mergedIntoAt                DateTime[] // Timestamps for when a guest was merged into this existing user.
  // rorPid                     String[]              @default([])
  // organization               String[]              @default([])
  isAdmin                     Boolean                       @default(false)
  isVerified                  Boolean                       @default(false)
  verificationCode            String                        @default("")
  siweNonce                   String                        @default("")
  authTokens                  AuthToken[]
  authorInvitesReceived       AuthorInvite[]                @relation("ReceivedAuthorInvites")
  authorInvitesSent           AuthorInvite[]                @relation("SentAuthorInvites")
  receivedTransactions        ChainTransaction[]            @relation("ReceivedTransactions")
  sentTransactions            ChainTransaction[]            @relation("SentTransactions")
  interactionLogs             InteractionLog[]
  invitesReceived             Invite[]                      @relation("ReceivedInvites")
  invitesSent                 Invite[]                      @relation("SentInvites")
  ownedNodes                  Node[]
  authoredNodes               NodeAuthor[]
  nodeVotes                   NodeVote[]
  accessGrants                OauthAccessGrant[]
  accessTokens                OauthAccessToken[]
  identities                  UserIdentity[]
  Waitlist                    Waitlist[]
  wallets                     Wallet[]
  canRunCode                  Boolean?                      @default(false)
  DataReference               DataReference[]
  CidPruneList                CidPruneList[]
  PublicDataReference         PublicDataReference[]
  FriendReferral              FriendReferral[]
  currentDriveStorageLimitGb  Int                           @default(100)
  maxDriveStorageLimitGb      Int                           @default(500)
  userOrganizations           UserOrganizations[]
  UploadJobs                  UploadJobs[]
  NodeFeedItemEndorsement     NodeFeedItemEndorsement[]
  DesciCommunity              DesciCommunity?               @relation(fields: [desciCommunityId], references: [id])
  desciCommunityId            Int?
  CommunityMember             CommunityMember[]
  NodeAttestation             NodeAttestation[]
  Annotation                  Annotation[]
  NodeAttestationVerification NodeAttestationVerification[]
  NodeAttestationReaction     NodeAttestationReaction[]
  ApiKey                      ApiKey[]
  PublishTaskQueue            PublishTaskQueue[]
  NodeContribution            NodeContribution[]
  OrcidPutCodes               OrcidPutCodes[]
  BookmarkedNode              BookmarkedNode[]
  DeferredEmails              DeferredEmails[]
  UserNotifications           UserNotifications[]
  CommentVote                 CommentVote[]
  NodeLike                    NodeLike[]
  CommunitySubmission         CommunitySubmission[]
  PublishedWallet             PublishedWallet[]
  GuestDataReference          GuestDataReference[]
  DataMigration               DataMigration[]

  // Relationships
  editorRoles         JournalEditor[] // User as editor
  authoredSubmissions JournalSubmission[] @relation("AuthorSubmission")
  assignedSubmissions JournalSubmission[] @relation("EditorSubmission")
  refereeAssignments  RefereeAssignment[]
  invitedEditors      JournalEditor[]     @relation("InviterRelation")
  inviteCredits       Int                 @default(0)
  JournalEventLogs    JournalEventLog[]
  JournalSubmissions  JournalSubmission[]
  EditorInvite        EditorInvite[]
  RefereeInvite       RefereeInvite[]
  // messagesSent        Message[]           @relation("MessageSender")
  // messagesReceived    Message[]           @relation("MessageReceiver")
  // Message             Message[]
  // JournalSubmissionMessage JournalSubmissionMessage[]
  // JournalSubmissionMessage JournalSubmissionMessage[]
  // JournalSubmissionMessage JournalSubmissionMessage[]

  @@index([orcid])
  @@index([walletAddress])
  @@index([pseudonym])
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  keyHashed  String    @unique
  memo       String
  createdAt  DateTime  @default(now())
  lastUsed   DateTime? @updatedAt
  isActive   Boolean   @default(true)
  createdIp  String
  lastUsedIp String?
  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  // @@unique([memo, userId])
  @@index([userId])
}

// Seems unused
model Invite {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String?
  phoneNumber String?
  senderId    Int
  receiverId  Int?
  inviteCode  String?  @default("desci")
  expired     Boolean  @default(false)
  expiredAt   DateTime @default(dbgenerated("'2001-01-01 00:00:00'::timestamp without time zone"))
  receiver    User?    @relation("ReceivedInvites", fields: [receiverId], references: [id])
  sender      User     @relation("SentInvites", fields: [senderId], references: [id])
}

// Seems unused
model AuthorInvite {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  phoneNumber String   @unique
  senderId    Int
  receiverId  Int
  nodeId      Int
  node        Node     @relation(fields: [nodeId], references: [id])
  receiver    User     @relation("ReceivedAuthorInvites", fields: [receiverId], references: [id])
  sender      User     @relation("SentAuthorInvites", fields: [senderId], references: [id])
}

// Seems unused
model NodeAuthor {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shares    Int
  userId    Int
  nodeId    Int
  node      Node     @relation(fields: [nodeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, nodeId])
}

// Seems unused
model NodeVote {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  voteWeight  Int
  userId      Int
  nodeId      Int
  node        Node              @relation(fields: [nodeId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  transaction ChainTransaction?
}

// Seems unused
model ChainTransaction {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  hash         String
  type         ChainTransactionType
  userId       Int?
  targetUserId Int?
  nodeId       Int?
  nodeVoteId   Int?                 @unique
  node         Node?                @relation(fields: [nodeId], references: [id])
  nodeVote     NodeVote?            @relation(fields: [nodeVoteId], references: [id])
  targetUser   User?                @relation("ReceivedTransactions", fields: [targetUserId], references: [id])
  user         User?                @relation("SentTransactions", fields: [userId], references: [id])
}

model MagicLink {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime @default(dbgenerated("(now() + '01:00:00'::interval)"))
  failedAttempts Int      @default(0)
  token          String
  email          String
}

// Seems unused
model OauthAccessToken {
  id                    String           @id
  userId                Int
  applicationId         String
  token                 String           @unique
  refreshToken          String?          @unique
  tokenExpiresAt        DateTime?
  refreshTokenExpiresAt DateTime?
  scopes                Json             @default("[]")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  application           OauthApplication @relation(fields: [applicationId], references: [id])
  user                  User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

// Seems unused
model OauthAccessGrant {
  id                  String           @id
  userId              Int
  applicationId       String
  token               String           @unique
  expiresAt           DateTime
  redirectUri         String
  codeChallengeMethod String?
  codeChallenge       String?
  scopes              Json             @default("[]")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  application         OauthApplication @relation(fields: [applicationId], references: [id])
  user                User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

// Seems unused
model OauthApplication {
  id           String             @id
  name         String
  clientId     String             @unique
  clientSecret String
  redirectUris Json               @default("[]")
  scopes       Json               @default("[]")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  grants       Json               @default("[]")
  accessGrants OauthAccessGrant[]
  accessTokens OauthAccessToken[]
}

model UserIdentity {
  id        String   @id @default(uuid())
  userId    Int
  provider  String
  uid       String
  name      String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, uid])
  @@index([userId])
}

model DataReference {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String?
  description String?
  cid         String
  root        Boolean
  rootCid     String?
  path        String?
  directory   Boolean
  size        Int
  type        DataType
  external    Boolean?
  nodeId      Int
  userId      Int
  versionId   Int?
  node        Node         @relation(fields: [nodeId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  nodeVersion NodeVersion? @relation(fields: [versionId], references: [id])
}

model GuestDataReference {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cid        String
  root       Boolean
  rootCid    String?
  path       String?
  directory  Boolean
  size       Int
  type       DataType
  external   Boolean?
  nodeId     Int
  userId     Int
  loggedData Json?
  node       Node     @relation(fields: [nodeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model CidPruneList {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  cid         String
  size        Int
  type        DataType
  duration    Int      @default(30)
  deleted     Boolean  @default(false)
  directory   Boolean
  nodeId      Int
  userId      Int
  node        Node     @relation(fields: [nodeId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model PublicDataReference {
  id          Int                               @id @default(autoincrement())
  createdAt   DateTime                          @default(now())
  updatedAt   DateTime                          @updatedAt
  name        String?
  cid         String
  root        Boolean
  rootCid     String?
  path        String?
  directory   Boolean
  size        Int
  type        DataType
  nodeId      Int
  userId      Int?
  versionId   Int?
  external    Boolean?
  mirrors     PublicDataReferenceOnIpfsMirror[]
  node        Node                              @relation(fields: [nodeId], references: [id])
  user        User?                             @relation(fields: [userId], references: [id])
  nodeVersion NodeVersion?                      @relation(fields: [versionId], references: [id])

  @@unique([path, versionId])
}

model IpfsMirror {
  id                  Int                               @id @default(autoincrement())
  createdAt           DateTime                          @default(now())
  updatedAt           DateTime                          @updatedAt
  name                String                            @unique
  description         String?
  website             String
  PublicDataReference PublicDataReferenceOnIpfsMirror[]
}

model PublicDataReferenceOnIpfsMirror {
  dataReferenceId     Int
  PublicDataReference PublicDataReference @relation(fields: [dataReferenceId], references: [id])
  mirrorId            Int
  mirror              IpfsMirror          @relation(fields: [mirrorId], references: [id])
  status              PublishState        @default(WAITING)
  retryCount          Int                 @default(0)
  providerCount       Int                 @default(0)

  @@id([dataReferenceId, mirrorId])
}

model PrivateShare {
  id             Int              @id @default(autoincrement())
  shareId        String           @unique
  nodeUUID       String
  memo           String?
  node           Node             @relation(fields: [nodeUUID], references: [uuid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BookmarkedNode BookmarkedNode[]

  @@index([nodeUUID])
  @@index([shareId])
}

model BookmarkedNode {
  id           Int           @id @default(autoincrement())
  userId       Int
  nodeUuid     String?
  title        String?
  doi          String?
  oaWorkId     String?
  type         BookmarkType  @default(NODE) // Default for existing records
  shareId      String?
  privateShare PrivateShare? @relation(fields: [shareId], references: [shareId])
  node         Node?         @relation(fields: [nodeUuid], references: [uuid])
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, type, nodeUuid, doi, oaWorkId])
}

model NodeCover {
  id       Int     @id @default(autoincrement())
  url      String
  nodeUuid String
  cid      String?
  version  Int?    @default(0)
  name     String?
  node     Node    @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, version])
}

model NodeThumbnails {
  id           Int    @id @default(autoincrement())
  componentCid String
  nodeUuid     String
  thumbnails   Json
  node         Node   @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, componentCid])
}

// PDFs generated in prepub flow
model DistributionPdfs {
  id                        Int     @id @default(autoincrement())
  originalPdfCid            String
  manifestCid               String
  nodeUuid                  String
  distPdfCid                String
  contentPagePreviewCid     String?
  frontmatterPagePreviewCid String?
  node                      Node    @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, originalPdfCid, manifestCid])
}

// Preview images of distribution PDFs created in prepub flow (first and second pages)
model PdfPreviews {
  id         Int    @id @default(autoincrement())
  nodeUuid   String
  pdfCid     String @unique
  previewMap Json
  node       Node   @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, pdfCid])
}

// The glue between a manifest contributor entry and a nodes profile
model NodeContribution {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contributorId String    @unique
  nodeId        Int
  userId        Int? // Target contributor user id
  verified      Boolean   @default(false)
  denied        Boolean   @default(false)
  email         String?
  orcid         String?
  deleted       Boolean   @default(false)
  deletedAt     DateTime?
  inviteSent    Boolean   @default(false)
  node          Node      @relation(fields: [nodeId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])

  @@unique([contributorId, nodeId, userId])
}

model FriendReferral {
  id                     Int                  @id @default(autoincrement())
  uuid                   String               @unique @default(uuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  senderUserId           Int
  senderUser             User?                @relation(fields: [senderUserId], references: [id])
  receiverEmail          String
  status                 FriendReferralStatus
  awardedStorage         Boolean              @default(false)
  amountAwardedStorageGb Int                  @default(0)
}

model ResearchFields {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Organization {
  id                String              @unique
  name              String
  userOrganizations UserOrganizations[]

  @@id([id])
}

model UserOrganizations {
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model OrcidProfile {
  id        Int      @id @default(autoincrement())
  orcidId   String   @unique
  updatedAt DateTime @updatedAt
  expiresIn DateTime
  profile   Json

  @@index([orcidId])
}

model UploadJobs {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  uploadType           UploadType
  uploadPayload        Json
  contextPath          String
  storageReference     String? // If using S3, this would be the storage key used
  totalSize            Int?
  totalFiles           Int?
  totalDirs            Int?
  proccessingStartTime DateTime?
  processingEndTime    DateTime?
  processingState      ProcessingState?
  nodeId               Int
  userId               Int
  node                 Node             @relation(fields: [nodeId], references: [id])
  user                 User             @relation(fields: [userId], references: [id])
}

model DocumentStore {
  key   String @id
  value Bytes
}

model DraftNodeTree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
  cid       String
  directory Boolean
  size      Int
  external  Boolean
  nodeId    Int
  // userId    Int
  node      Node     @relation(fields: [nodeId], references: [id])
  // user      User     @relation(fields: [userId], references: [id])

  @@unique([nodeId, path])
}

// create a model for Node UUIDs, titles, dates, authors, and abstracts
// NodeFeedItem: Cached entry of a dpid
model NodeFeedItem {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  nodeUuid                String
  nodeUuidHex             String
  nodeDpid10              String                    @unique
  manifestCid             String
  title                   String
  date                    DateTime
  authors                 String
  abstract                String
  nodeFeedItemEndorsement NodeFeedItemEndorsement[]
}

//NodeFeedItemEndorsement: An endorsement of a node feed item from a community
model NodeFeedItemEndorsement {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  nodeDpid10       String
  type             String
  userId           Int
  nodeFeedItemId   Int
  desciCommunityId Int
  user             User           @relation(fields: [userId], references: [id])
  nodeFeedItem     NodeFeedItem   @relation(fields: [nodeFeedItemId], references: [id])
  desciCommunity   DesciCommunity @relation(fields: [desciCommunityId], references: [id])
}

// an organization that endorses work and has members
model DesciCommunity {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  name                      String                      @unique
  slug                      String?                     @unique
  image_url                 String?
  subtitle                  String? // short description
  description               String
  keywords                  String[]
  memberString              String[] // string list of member names
  links                     String[] // string list of links
  hidden                    Boolean                     @default(false)
  members                   User[]
  endorsements              NodeFeedItemEndorsement[]
  CommunityMember           CommunityMember[]
  Attestation               Attestation[]
  NodeAttestation           NodeAttestation[]
  AttestationTemplate       AttestationTemplate[]
  CommunityEntryAttestation CommunityEntryAttestation[]
  CommunityRadarEntry       CommunityRadarEntry[]
  CommunitySubmission       CommunitySubmission[]
}

model CommunityMember {
  id          Int                     @id @default(autoincrement())
  communityId Int
  userId      Int
  role        CommunityMembershipRole
  user        User                    @relation(fields: [userId], references: [id])
  community   DesciCommunity          @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
}

// Templates for creating a new attestation
model AttestationTemplate {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  description      String
  image_url        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Attestation      Attestation[]
  DesciCommunity   DesciCommunity? @relation(fields: [desciCommunityId], references: [id])
  desciCommunityId Int?
}

// A factory attestation, these are the base attestations that can be assigned to nodes
model Attestation {
  id                        Int                         @id @default(autoincrement())
  name                      String
  communityId               Int
  description               String
  image_url                 String
  verified_image_url        String?
  templateId                Int?
  protected                 Boolean                     @default(false)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  canMintDoi                Boolean                     @default(false)
  canUpdateOrcid            Boolean                     @default(false)
  community                 DesciCommunity              @relation(fields: [communityId], references: [id])
  template                  AttestationTemplate?        @relation(fields: [templateId], references: [id])
  AttestationVersion        AttestationVersion[]
  NodeAttestation           NodeAttestation[]
  CommunityEntryAttestation CommunityEntryAttestation[]
  DeferredEmails            DeferredEmails[]

  @@unique([name, communityId])
}

model AttestationVersion {
  id                        Int                         @id @default(autoincrement())
  name                      String
  attestationId             Int
  description               String
  image_url                 String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  attestation               Attestation                 @relation(fields: [attestationId], references: [id])
  NodeAttestation           NodeAttestation[]
  CommunityEntryAttestation CommunityEntryAttestation[]
  DeferredEmails            DeferredEmails[]
}

// A communities selected attestations, these appear in their radar.
model CommunityEntryAttestation {
  id                   Int                @id @default(autoincrement())
  desciCommunityId     Int
  desciCommunity       DesciCommunity     @relation(fields: [desciCommunityId], references: [id])
  attestationId        Int
  attestationVersionId Int
  required             Boolean
  attestation          Attestation        @relation(fields: [attestationId], references: [id])
  attestationVersion   AttestationVersion @relation(fields: [attestationVersionId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@unique([attestationId, attestationVersionId, desciCommunityId])
}

//An attestation assigned to a node
model NodeAttestation {
  id                          Int                           @id @default(autoincrement())
  attestationId               Int
  attestation                 Attestation                   @relation(fields: [attestationId], references: [id])
  attestationVersionId        Int
  attestationVersion          AttestationVersion            @relation(fields: [attestationVersionId], references: [id])
  desciCommunityId            Int
  community                   DesciCommunity                @relation(fields: [desciCommunityId], references: [id])
  claimedById                 Int
  claimedBy                   User                          @relation(fields: [claimedById], references: [id])
  nodeDpid10                  String?
  nodeUuid                    String
  node                        Node                          @relation(fields: [nodeUuid], references: [uuid])
  nodeVersion                 Int
  claimedAt                   DateTime                      @default(now())
  revoked                     Boolean                       @default(false)
  revokedAt                   DateTime?
  Annotation                  Annotation[]
  NodeAttestationVerification NodeAttestationVerification[]
  NodeAttestationReaction     NodeAttestationReaction[]
  OrcidPutCodes               OrcidPutCodes[]
  CommunityRadarEntry         CommunityRadarEntry?          @relation(fields: [communityRadarEntryId], references: [id])
  communityRadarEntryId       Int?

  @@unique([nodeUuid, nodeVersion, attestationId, attestationVersionId])
}

model CommunityRadarEntry {
  id               Int               @id @default(autoincrement())
  desciCommunityId Int
  community        DesciCommunity    @relation(fields: [desciCommunityId], references: [id])
  nodeUuid         String
  node             Node              @relation(fields: [nodeUuid], references: [uuid])
  nodeAttestations NodeAttestation[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([nodeUuid, desciCommunityId])
}

model CommunitySubmission {
  id              Int              @id @default(autoincrement())
  communityId     Int
  community       DesciCommunity   @relation(fields: [communityId], references: [id])
  nodeId          String
  node            Node             @relation(fields: [nodeId], references: [uuid])
  nodeVersion     Int?
  userId          Int
  user            User             @relation(fields: [userId], references: [id])
  status          Submissionstatus @default(PENDING)
  rejectionReason String?
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([nodeId, communityId])
}

// Deferred emails are usually used when a published node is required, e.g. unpublished attestation claims, emails are deferred until node is published.
model DeferredEmails {
  id                   Int                 @id @default(autoincrement())
  nodeUuid             String
  emailType            EmailType
  attestationVersionId Int?
  attestationId        Int?
  attestation          Attestation?        @relation(fields: [attestationId], references: [id])
  node                 Node                @relation(fields: [nodeUuid], references: [uuid])
  User                 User?               @relation(fields: [userId], references: [id])
  userId               Int?
  AttestationVersion   AttestationVersion? @relation(fields: [attestationVersionId], references: [id])
}

enum EmailType {
  PROTECTED_ATTESTATION
}

//Comments on attestations
model Annotation {
  id                Int              @id @default(autoincrement())
  type              AnnotationType
  body              String
  highlights        Json[]           @default([])
  links             String[]         @default([])
  authorId          Int
  author            User             @relation(fields: [authorId], references: [id])
  nodeAttestationId Int?
  attestation       NodeAttestation? @relation(fields: [nodeAttestationId], references: [id])
  deferredEmailsId  Int?
  uuid              String?
  node              Node?            @relation(fields: [uuid], references: [uuid])
  visible           Boolean          @default(true)
  createdAt         DateTime?
  updatedAt         DateTime?        @updatedAt
  CommentVote       CommentVote[]
  replies           Annotation[]     @relation("CommentReply")
  replyTo           Annotation?      @relation("CommentReply", fields: [replyToId], references: [id])
  replyToId         Int?
}

//An emoji reaction to a node
model NodeAttestationReaction {
  id                Int             @id @default(autoincrement())
  reaction          String
  authorId          Int
  author            User            @relation(fields: [authorId], references: [id])
  nodeAttestationId Int
  attestation       NodeAttestation @relation(fields: [nodeAttestationId], references: [id])
  deferredEmailsId  Int?
}

// More prevalent reaction, reputation is staked
model NodeAttestationVerification {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  nodeAttestationId Int
  nodeAttestation   NodeAttestation @relation(fields: [nodeAttestationId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deferredEmailsId  Int?

  @@unique([nodeAttestationId, userId])
}

model PublishTaskQueue {
  id            Int                    @id @default(autoincrement())
  ceramicStream String
  commitId      String
  cid           String
  dpid          String?
  userId        Int
  transactionId String                 @unique
  uuid          String
  status        PublishTaskQueueStatus
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  node          Node                   @relation(fields: [uuid], references: [uuid])
  user          User                   @relation(fields: [userId], references: [id])
}

model OrcidPutCodes {
  id        Int              @id @default(autoincrement())
  orcid     String
  putcode   String?
  reference PutcodeReference @default(PREPRINT)
  claimId   Int?
  record    ORCIDRecord
  userId    Int
  uuid      String
  claim     NodeAttestation? @relation(fields: [claimId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  Node      Node             @relation(fields: [uuid], references: [uuid])

  @@unique([orcid, uuid, reference])
}

model DoiRecord {
  id            Int                  @id @default(autoincrement())
  doi           String               @unique
  dpid          String               @unique
  // add dpid or resource path the doi is registered for
  uuid          String
  node          Node                 @relation(fields: [uuid], references: [uuid])
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  DoiSubmission DoiSubmissionQueue[]
}

model DoiSubmissionQueue {
  id           Int        @id @default(autoincrement())
  batchId      String     @unique
  createdAt    DateTime   @default(now())
  dpid         String
  doiRecordId  Int?
  doi          DoiRecord? @relation(fields: [doiRecordId], references: [id])
  notification Json?
  status       DoiStatus  @default(PENDING)
  attempts     Int?       @default(0)
  uniqueDoi    String     @unique
  uuid         String
  node         Node       @relation(fields: [uuid], references: [uuid])
  updatedAt    DateTime   @updatedAt
}

model UserNotifications {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  userId    Int
  nodeUuid  String?
  type      NotificationType
  category  NotificationCategory @default(DESCI_PUBLISH)
  title     String
  message   String
  payload   Json? // E.g. hyperlinks, DPID, DOI, frontend handles.
  dismissed Boolean              @default(false)
  node      Node?                @relation(fields: [nodeUuid], references: [uuid])
  user      User                 @relation(fields: [userId], references: [id])
}

model PublishStatus {
  id                     Int          @id @default(autoincrement())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  nodeUuid               String
  version                Int
  versionId              Int?
  commitId               String?      @unique
  manifestCid            String?
  ceramicCommit          Boolean?
  assignDpid             Boolean?
  handleNodeVersionEntry Boolean?
  createPdr              Boolean?
  fireDeferredEmails     Boolean?
  fireNotifications      Boolean?
  updateAttestations     Boolean?
  transformDraftComments Boolean?
  triggerDoiMint         Boolean?
  nodeVersion            NodeVersion? @relation(fields: [versionId], references: [id])
  node                   Node         @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, version])
  @@index([nodeUuid])
}

model ExternalPublications {
  id          Int       @id @default(autoincrement())
  uuid        String
  node        Node      @relation(fields: [uuid], references: [uuid])
  score       Float
  doi         String
  publisher   String
  publishYear String
  sourceUrl   String
  isVerified  Boolean   @default(true)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // @@unique([uuid, publisher])
}

model CommentVote {
  id           Int        @id @default(autoincrement())
  type         VoteType
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  annotationId Int
  annotation   Annotation @relation(fields: [annotationId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, annotationId])
}

model NodeLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  nodeUuid  String
  node      Node     @relation(fields: [nodeUuid], references: [uuid])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nodeUuid, userId])
}

model DataMigration {
  id              Int                    @id @default(autoincrement())
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  migrationType   MigrationType
  migrationStatus MigrationStatus
  migrationError  String?
  migrationData   Json
  cleanupStatus   MigrationCleanupStatus @default(NOT_REQUESTED)
  nodes           Node[]
  userId          Int
  user            User                   @relation(fields: [userId], references: [id])
}

model Journal {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  iconCid      String? // URL to icon
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isCommercial Boolean  @default(false)

  // Relationships
  editors         JournalEditor[]
  submissions     JournalSubmission[]
  EditorInvite    EditorInvite[]
  // JournalEmailTemplate JournalEmailTemplate[]
  JournalBilling  JournalBilling?
  JournalEventLog JournalEventLog[]
}

model JournalEditor {
  id         Int        @id @default(autoincrement())
  journalId  Int
  userId     Int
  role       EditorRole
  expertise  String[] // OpenAlex topics
  inviterId  Int?
  invitedAt  DateTime   @default(now())
  acceptedAt DateTime?

  // Relationships
  journal Journal @relation(fields: [journalId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  inviter User?   @relation("InviterRelation", fields: [inviterId], references: [id])

  @@unique([userId, journalId])
}

model JournalSubmission {
  id               Int              @id @default(autoincrement())
  journalId        Int
  authorId         Int
  dpid             String // Node dPID
  version          String // Node version
  title            String
  status           SubmissionStatus @default(SUBMITTED)
  assignedEditorId Int?
  submittedAt      DateTime         @default(now())
  acceptedAt       DateTime?
  rejectedAt       DateTime?
  doiMintedAt      DateTime?
  doi              String? // Minted DOI

  // Relationships
  journal            Journal                     @relation(fields: [journalId], references: [id])
  author             User                        @relation("AuthorSubmission", fields: [authorId], references: [id])
  assignedEditor     User?                       @relation("EditorSubmission", fields: [assignedEditorId], references: [id])
  revisions          JournalSubmissionRevision[]
  refereeAssignments RefereeAssignment[]
  reviews            JournalSubmissionReview[]
  eventLogs          JournalEventLog[]
  User               User?                       @relation(fields: [userId], references: [id])
  userId             Int?
  RefereeInvite      RefereeInvite[]
  // Message            Message[]
  // JournalSubmissionMessage JournalSubmissionMessage[]
}

model JournalSubmissionRevision {
  id           Int          @id @default(autoincrement())
  submissionId Int
  dpid         String // New Node dPID
  version      String // New Node version
  type         RevisionType
  requestedAt  DateTime     @default(now())
  submittedAt  DateTime?
  comments     String?

  // Relationships
  submission JournalSubmission @relation(fields: [submissionId], references: [id])
}

model RefereeAssignment {
  id                    Int       @id @default(autoincrement())
  submissionId          Int
  refereeId             Int
  assignedById          Int // Editor who assigned
  assignedAt            DateTime  @default(now())
  inviteAcceptedAt      DateTime?
  inviteDeclinedAt      DateTime?
  // reassignedAt          DateTime? // Probably unused
  dueDate               DateTime?
  suggestedAlternatives String[] // Alternative referees if declined

  // Relationships
  submission JournalSubmission         @relation(fields: [submissionId], references: [id])
  referee    User                      @relation(fields: [refereeId], references: [id])
  reviews    JournalSubmissionReview[]

  @@unique([submissionId, refereeId])
}

model JournalSubmissionReview {
  id                  Int            @id @default(autoincrement())
  submissionId        Int
  refereeAssignmentId Int
  recommendation      ReviewDecision
  // comments             String // Review content        Leaning towards Json type fields here, but lets work this out later.
  submittedAt         DateTime       @default(now())
  // confidentialComments String? // Comments for editor only  Leaning towards Json type fields here, but lets work this out later.

  // Relationships
  submission        JournalSubmission @relation(fields: [submissionId], references: [id])
  refereeAssignment RefereeAssignment @relation(fields: [refereeAssignmentId], references: [id])
}

model JournalEventLog {
  id           Int                   @id @default(autoincrement())
  submissionId Int? // Made optional to support events that aren't tied to a submission, e.g. assigining an associate editor.
  journalId    Int
  userId       Int? // Optional for unauthed actions, i.e. decline an invite.
  action       JournalEventLogAction
  details      Json?
  timestamp    DateTime              @default(now())

  // Relationships
  submission JournalSubmission? @relation(fields: [submissionId], references: [id])
  journal    Journal            @relation(fields: [journalId], references: [id])
  user       User?              @relation(fields: [userId], references: [id])
}

model EditorInvite {
  id         Int        @id @default(autoincrement())
  email      String
  journalId  Int
  role       EditorRole
  inviterId  Int
  createdAt  DateTime   @default(now())
  expiresAt  DateTime
  decisionAt DateTime?
  token      String     @unique
  accepted   Boolean?

  // Relationships
  journal Journal @relation(fields: [journalId], references: [id])
  inviter User    @relation(fields: [inviterId], references: [id])
}

model RefereeInvite {
  id           Int      @id @default(autoincrement())
  email        String
  submissionId Int
  invitedById  Int
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  accepted     Boolean  @default(false)
  declined     Boolean  @default(false)
  // suggestedReferees String[] @default([])   - We don't know the type of this yet TBD

  // Relationships
  submission JournalSubmission @relation(fields: [submissionId], references: [id])
  invitedBy  User              @relation(fields: [invitedById], references: [id])
}

// model JournalSubmissionMessage {
//   id           Int       @id @default(autoincrement())
//   submissionId Int
//   senderId     Int
//   receiverId   Int
//   message      String
//   createdAt    DateTime  @default(now())
//   readAt       DateTime?

//   // Relationships
//   submission JournalSubmission @relation(fields: [submissionId], references: [id])
//   sender     User              @relation("MessageSender", fields: [senderId], references: [id])
//   receiver   User              @relation("MessageReceiver", fields: [receiverId], references: [id])
//   User       User?             @relation(fields: [userId], references: [id])
//   userId     Int?
// }

// model JournalEmailTemplate { 
//   id        Int               @id @default(autoincrement())
//   journalId Int
//   type      EmailTemplateType
//   subject   String
//   body      String     // Don't think this can be expressed in a string in a useful way, maybe a JSON Object, lets deal with this during implementation.

//   // Relationships
//   journal Journal @relation(fields: [journalId], references: [id])
// }

model JournalBilling {
  id                Int       @id @default(autoincrement())
  journalId         Int       @unique
  invoicingEmail    String?
  billingAddress    String?
  totalDoisMinted   Int       @default(0)
  totalAmountBilled Float     @default(0)
  lastInvoiceDate   DateTime?

  // Relationships
  journal  Journal          @relation(fields: [journalId], references: [id])
  invoices JournalInvoice[]
}

model JournalInvoice {
  id            Int           @id @default(autoincrement())
  billingId     Int
  invoiceNumber String
  amount        Float
  doisMinted    Int
  periodStart   DateTime
  periodEnd     DateTime
  issueDate     DateTime
  paidDate      DateTime?
  status        InvoiceStatus @default(PENDING)

  // Relationships
  billing JournalBilling @relation(fields: [billingId], references: [id])
}

enum MigrationType {
  PRIVATE_TO_PUBLIC
  GUEST_TO_PRIVATE
}

enum MigrationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum MigrationCleanupStatus {
  NOT_REQUESTED
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum VoteType {
  Yes
  No
}

enum ORCIDRecord {
  WORK
  QUALIFICATION
  EDUCATION
  EMPLOYMENT
}

enum WalletProvider {
  GOOGLE
  ORCID
  DID
}

enum PutcodeReference {
  DATASET
  SOFTWARE
  PREPRINT
}

enum CommunityMembershipRole {
  ADMIN
  MEMBER
}

enum AnnotationType {
  COMMENT
  HIGHLIGHT
}

enum UploadType {
  REGULAR
  EXTERNAL_URL
  EXTERNAL_CID
}

enum ProcessingState {
  STARTED
  FAILED
  COMPLETED
}

enum FriendReferralStatus {
  PENDING
  ACCEPTED
}

// datasetId Int?
// dataset   Dataset? @relation(fields: [datasetId], references: [id])

enum ActionType {
  ORCID_RETRIEVE
  USER_LOGIN
  USER_WALLET_ASSOCIATE
  USER_WALLET_CONNECT
  USER_NODE_VOTE
  WAITLIST_ADD
  RETRIEVE_URL
  RETRIEVE_URL_FAIL
  RETREIVE_URL_SUCCESS
  USER_TERMS_CONSENT
  PUBLISH_NODE
  PUBLISH_NODE_CID_SUCCESS
  PUBLISH_NODE_CID_FAIL
  PUBLISH_NODE_RESEARCH_OBJECT_SUCCESS
  PUBLISH_NODE_RESEARCH_OBJECT_FAIL
  USER_ACTION
  NEW_REFERRAL
  ACCEPTED_REFERRAL
  USER_PUBLISH_CONSENT
  CLAIM_ATTESTATION
  REVOKE_CLAIM
  CLAIM_ENTRY_ATTESTATIONS
  ADD_COMMENT
  REMOVE_COMMENT
  VERIFY_ATTESTATION
  UNVERIFY_ATTESTATION
  UPDATE_ORCID_RECORD
  REMOVE_ORCID_WORK_RECORD
  ORCID_API_ERROR
  EDIT_COMMENT
  GUEST_USER_CONVERSION
  USER_SIGNUP_SUCCESS
  MERGE_GUEST_INTO_EXISTING_USER_ATTEMPT
  MERGE_GUEST_INTO_EXISTING_USER_SUCCESS
  MERGE_GUEST_INTO_EXISTING_USER_FAIL
}

enum ChainTransactionType {
  NODE_MINT
  NODE_UPDATE
  NODE_VOTE
}

enum NodeState {
  NEW
  PENDING_DAO_APPROVAL
  DAO_APPROVED
  PENDING_VALIDATION
  VALIDATED
  WITHDRAWN
}

enum DataType {
  DATA_BUCKET
  MANIFEST
  UNKNOWN
  DATASET
  IMAGES
  VIDEOS
  CODE_REPOS
  DOCUMENT
  SUBMISSION_PACKAGE
  SUBMISSION_PACKAGE_PREVIEW
  THUMBNAIL
}

enum PublishState {
  WAITING
  PENDING
  SUCCESS
  FAILED
}

enum PublishTaskQueueStatus {
  WAITING
  PENDING
  FAILED
}

enum AuthTokenSource {
  ORCID
}

enum DoiStatus {
  PENDING
  FAILED
  SUCCESS
}

enum NotificationType {
  PUBLISH
  COMMENTS
  CONTRIBUTOR_INVITE
  DOI_ISSUANCE_STATUS
  ATTESTATION_VALIDATION
  JOURNAL_EDITOR_INVITE
  SUBMISSION_ASSIGNED_TO_EDITOR
  SUBMISSION_REASSIGNED_TO_EDITOR
  REFEREE_INVITE
  REFEREE_REASSIGNED
  REFEREE_ACCEPTED
  REFEREE_DECLINED
  REFEREE_REVIEW_REMINDER
  MAJOR_REVISION_REQUESTED
  MINOR_REVISION_REQUESTED
  REVISION_SUBMITTED
  SUBMISSION_DESK_REJECTION
  SUBMISSION_FINAL_REJECTION
  SUBMISSION_ACCEPTED
  SUBMISSION_OVERDUE_EDITOR_REMINDER
}

enum NotificationCategory {
  DESCI_PUBLISH
  DESCI_JOURNALS
}

enum BookmarkType {
  NODE
  DOI
  OA
}

enum Submissionstatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EditorRole {
  CHIEF_EDITOR
  ASSOCIATE_EDITOR
}

enum SubmissionStatus {
  SUBMITTED
  UNDER_REVIEW
  REVISION_REQUESTED
  ACCEPTED
  REJECTED
}

enum RevisionType {
  MINOR
  MAJOR
}

enum ReviewDecision {
  ACCEPT
  MINOR_REVISION
  MAJOR_REVISION
  REJECT
}

enum JournalEventLogAction {
  JOURNAL_CREATED
  JOURNAL_UPDATED
  SUBMISSION_CREATED
  EDITOR_ASSIGNED
  EDITOR_INVITED
  EDITOR_ACCEPTED_INVITE
  EDITOR_DECLINED_INVITE
  EDITOR_REMOVED
  EDITOR_UPDATED
  EDITOR_ROLE_CHANGED
  SUBMISSION_ACCEPTED
  SUBMISSION_REJECTED
  REVISION_REQUESTED
  REVISION_SUBMITTED
  DOI_MINTED
  REFEREE_INVITED
  REFEREE_ACCEPTED
  REFEREE_DECLINED
  REFEREE_REASSIGNED
  REVIEW_SUBMITTED
  STATUS_CHANGED
}

enum EmailTemplateType {
  EDITOR_INVITE
  REFEREE_INVITE
  SUBMISSION_STATUS_UPDATE
  REVISION_REQUEST
  DECISION_NOTIFICATION
  DOI_MINTED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}
