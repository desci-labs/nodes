generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Node {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  title               String
  cid                 String                @default("")
  state               NodeState             @default(NEW)
  isFeatured          Boolean               @default(false)
  manifestUrl         String
  restBody            Json                  @default("{}")
  replicationFactor   Int
  ownerId             Int
  uuid                String?               @unique @default(uuid())
  manifestDocumentId  String                @default("")
  owner               User                  @relation(fields: [ownerId], references: [id])
  authorInvites       AuthorInvite[]
  transactions        ChainTransaction[]
  interactionLogs     InteractionLog[]
  authors             NodeAuthor[]
  versions            NodeVersion[]
  votes               NodeVote[]
  DataReference       DataReference[]
  PublicDataReference PublicDataReference[]
  CidPruneList        CidPruneList[]
  NodeCover           NodeCover[]
  isDeleted           Boolean               @default(false)
  deletedAt           DateTime?
  UploadJobs          UploadJobs[]
  DraftNodeTree       DraftNodeTree[]
  ceramicStream       String?
  NodeAttestation     NodeAttestation[]
  NodeThumbnails      NodeThumbnails[]
  PublishTaskQueue    PublishTaskQueue[]
  NodeContribution    NodeContribution[]
  PrivateShare        PrivateShare[]
  OrcidPutCodes       OrcidPutCodes[]
  DistributionPdfs    DistributionPdfs[]
  PdfPreviews         PdfPreviews[]
  DoiRecord           DoiRecord[]
  dpidAlias           Int?
  DoiSubmissionQueue  DoiSubmissionQueue[]
  BookmarkedNode      BookmarkedNode[]

  @@index([ownerId])
  @@index([uuid])
}

model NodeVersion {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  manifestUrl         String
  cid                 String                @default("")
  transactionId       String?
  commitId            String?
  nodeId              Int?
  node                Node?                 @relation(fields: [nodeId], references: [id])
  PublicDataReference PublicDataReference[]
  DataReference       DataReference[]
}

model InteractionLog {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ip         String?
  userAgent  String?
  extra      String?
  action     ActionType?
  userId     Int?
  rep        Int?
  nodeId     Int?
  waitlistId Int?
  node       Node?       @relation(fields: [nodeId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])
  waitlist   Waitlist?   @relation(fields: [waitlistId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model AuthToken {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  accessToken  String?
  refreshToken String?
  expiresIn    Int?
  tokenId      String?
  source       AuthTokenSource?
  userId       Int
  user         User             @relation(fields: [userId], references: [id])
}

model Waitlist {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique
  userId          Int?
  user            User?            @relation(fields: [userId], references: [id])
  interactionLogs InteractionLog[]
}

model Wallet {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  address         String
  network         String?
  chainId         String?
  msgSignature    String?
  msgPlain        String?
  userId          Int?
  nickname        String?
  giftTransaction String?
  usedFaucet      Boolean? @default(false)
  user            User?    @relation(fields: [userId], references: [id])

  @@index([address])
  @@index([userId])
}

model User {
  id                          Int                           @id @default(autoincrement())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  email                       String                        @unique
  phoneNumber                 String?                       @unique
  name                        String?
  website                     String?
  googleScholarUrl            String?
  researchInterests           String?
  gitcoinPassport             String?                       @unique
  walletAddress               String?                       @unique
  isPatron                    Boolean                       @default(false)
  isWarden                    Boolean                       @default(false)
  isKeeper                    Boolean                       @default(false)
  pseudonym                   String?                       @unique
  orcid                       String?                       @unique
  // rorPid                     String[]              @default([])
  // organization               String[]              @default([])
  isAdmin                     Boolean                       @default(false)
  isVerified                  Boolean                       @default(false)
  verificationCode            String                        @default("")
  siweNonce                   String                        @default("")
  authTokens                  AuthToken[]
  authorInvitesReceived       AuthorInvite[]                @relation("ReceivedAuthorInvites")
  authorInvitesSent           AuthorInvite[]                @relation("SentAuthorInvites")
  receivedTransactions        ChainTransaction[]            @relation("ReceivedTransactions")
  sentTransactions            ChainTransaction[]            @relation("SentTransactions")
  interactionLogs             InteractionLog[]
  invitesReceived             Invite[]                      @relation("ReceivedInvites")
  invitesSent                 Invite[]                      @relation("SentInvites")
  ownedNodes                  Node[]
  authoredNodes               NodeAuthor[]
  nodeVotes                   NodeVote[]
  accessGrants                OauthAccessGrant[]
  accessTokens                OauthAccessToken[]
  identities                  UserIdentity[]
  Waitlist                    Waitlist[]
  wallets                     Wallet[]
  canRunCode                  Boolean?                      @default(false)
  DataReference               DataReference[]
  CidPruneList                CidPruneList[]
  PublicDataReference         PublicDataReference[]
  FriendReferral              FriendReferral[]
  currentDriveStorageLimitGb  Int                           @default(100)
  maxDriveStorageLimitGb      Int                           @default(500)
  userOrganizations           UserOrganizations[]
  UploadJobs                  UploadJobs[]
  NodeFeedItemEndorsement     NodeFeedItemEndorsement[]
  DesciCommunity              DesciCommunity?               @relation(fields: [desciCommunityId], references: [id])
  desciCommunityId            Int?
  CommunityMember             CommunityMember[]
  NodeAttestation             NodeAttestation[]
  Annotation                  Annotation[]
  NodeAttestationVerification NodeAttestationVerification[]
  NodeAttestationReaction     NodeAttestationReaction[]
  ApiKey                      ApiKey[]
  PublishTaskQueue            PublishTaskQueue[]
  NodeContribution            NodeContribution[]
  OrcidPutCodes               OrcidPutCodes[]
  BookmarkedNode              BookmarkedNode[]

  @@index([orcid])
  @@index([walletAddress])
  @@index([pseudonym])
}

model ApiKey {
  id         Int       @id @default(autoincrement())
  keyHashed  String    @unique
  memo       String
  createdAt  DateTime  @default(now())
  lastUsed   DateTime? @updatedAt
  isActive   Boolean   @default(true)
  createdIp  String
  lastUsedIp String?
  userId     Int
  user       User      @relation(fields: [userId], references: [id])

  // @@unique([memo, userId])
  @@index([userId])
}

model Invite {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String?
  phoneNumber String?
  senderId    Int
  receiverId  Int?
  inviteCode  String?  @default("desci")
  expired     Boolean  @default(false)
  expiredAt   DateTime @default(dbgenerated("'2001-01-01 00:00:00'::timestamp without time zone"))
  receiver    User?    @relation("ReceivedInvites", fields: [receiverId], references: [id])
  sender      User     @relation("SentInvites", fields: [senderId], references: [id])
}

model AuthorInvite {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique
  phoneNumber String   @unique
  senderId    Int
  receiverId  Int
  nodeId      Int
  node        Node     @relation(fields: [nodeId], references: [id])
  receiver    User     @relation("ReceivedAuthorInvites", fields: [receiverId], references: [id])
  sender      User     @relation("SentAuthorInvites", fields: [senderId], references: [id])
}

model NodeAuthor {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shares    Int
  userId    Int
  nodeId    Int
  node      Node     @relation(fields: [nodeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, nodeId])
}

model NodeVote {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  voteWeight  Int
  userId      Int
  nodeId      Int
  node        Node              @relation(fields: [nodeId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  transaction ChainTransaction?
}

model ChainTransaction {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  hash         String
  type         ChainTransactionType
  userId       Int?
  targetUserId Int?
  nodeId       Int?
  nodeVoteId   Int?                 @unique
  node         Node?                @relation(fields: [nodeId], references: [id])
  nodeVote     NodeVote?            @relation(fields: [nodeVoteId], references: [id])
  targetUser   User?                @relation("ReceivedTransactions", fields: [targetUserId], references: [id])
  user         User?                @relation("SentTransactions", fields: [userId], references: [id])
}

model MagicLink {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime @default(dbgenerated("(now() + '01:00:00'::interval)"))
  failedAttempts Int      @default(0)
  token          String
  email          String
}

model OauthAccessToken {
  id                    String           @id
  userId                Int
  applicationId         String
  token                 String           @unique
  refreshToken          String?          @unique
  tokenExpiresAt        DateTime?
  refreshTokenExpiresAt DateTime?
  scopes                Json             @default("[]")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  application           OauthApplication @relation(fields: [applicationId], references: [id])
  user                  User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model OauthAccessGrant {
  id                  String           @id
  userId              Int
  applicationId       String
  token               String           @unique
  expiresAt           DateTime
  redirectUri         String
  codeChallengeMethod String?
  codeChallenge       String?
  scopes              Json             @default("[]")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  application         OauthApplication @relation(fields: [applicationId], references: [id])
  user                User             @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model OauthApplication {
  id           String             @id
  name         String
  clientId     String             @unique
  clientSecret String
  redirectUris Json               @default("[]")
  scopes       Json               @default("[]")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  grants       Json               @default("[]")
  accessGrants OauthAccessGrant[]
  accessTokens OauthAccessToken[]
}

model UserIdentity {
  id        String   @id
  userId    Int
  provider  String
  uid       String
  name      String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, uid])
  @@index([userId])
}

model DataReference {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String?
  description String?
  cid         String
  root        Boolean
  rootCid     String?
  path        String?
  directory   Boolean
  size        Int
  type        DataType
  external    Boolean?
  nodeId      Int
  userId      Int
  versionId   Int?
  node        Node         @relation(fields: [nodeId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  nodeVersion NodeVersion? @relation(fields: [versionId], references: [id])
}

model CidPruneList {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  cid         String
  size        Int
  type        DataType
  duration    Int      @default(30)
  deleted     Boolean  @default(false)
  directory   Boolean
  nodeId      Int
  userId      Int
  node        Node     @relation(fields: [nodeId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model PublicDataReference {
  id          Int                               @id @default(autoincrement())
  createdAt   DateTime                          @default(now())
  updatedAt   DateTime                          @updatedAt
  name        String?
  description String?
  cid         String
  root        Boolean
  rootCid     String?
  path        String?
  directory   Boolean
  size        Int
  type        DataType
  nodeId      Int
  userId      Int?
  versionId   Int?
  external    Boolean?
  mirrors     PublicDataReferenceOnIpfsMirror[]
  node        Node                              @relation(fields: [nodeId], references: [id])
  user        User?                             @relation(fields: [userId], references: [id])
  nodeVersion NodeVersion?                      @relation(fields: [versionId], references: [id])

  @@unique([path, versionId])
}

model IpfsMirror {
  id                  Int                               @id @default(autoincrement())
  createdAt           DateTime                          @default(now())
  updatedAt           DateTime                          @updatedAt
  name                String                            @unique
  description         String?
  website             String
  PublicDataReference PublicDataReferenceOnIpfsMirror[]
}

model PublicDataReferenceOnIpfsMirror {
  dataReferenceId     Int
  PublicDataReference PublicDataReference @relation(fields: [dataReferenceId], references: [id])
  mirrorId            Int
  mirror              IpfsMirror          @relation(fields: [mirrorId], references: [id])
  status              PublishState        @default(WAITING)
  retryCount          Int                 @default(0)
  providerCount       Int                 @default(0)

  @@id([dataReferenceId, mirrorId])
}

model PrivateShare {
  id             Int              @id @default(autoincrement())
  shareId        String           @unique
  nodeUUID       String
  memo           String?
  node           Node             @relation(fields: [nodeUUID], references: [uuid])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BookmarkedNode BookmarkedNode[]

  @@index([nodeUUID])
  @@index([shareId])
}

model BookmarkedNode {
  id           Int           @id @default(autoincrement())
  userId       Int
  nodeUuid     String
  shareId      String?
  privateShare PrivateShare? @relation(fields: [shareId], references: [shareId])
  node         Node          @relation(fields: [nodeUuid], references: [uuid])
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([userId, nodeUuid])
}

model NodeCover {
  id       Int     @id @default(autoincrement())
  url      String
  nodeUuid String
  cid      String?
  version  Int?    @default(0)
  name     String?
  node     Node    @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, version])
}

model NodeThumbnails {
  id           Int    @id @default(autoincrement())
  componentCid String
  nodeUuid     String
  thumbnails   Json
  node         Node   @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, componentCid])
}

// PDFs generated in prepub flow
model DistributionPdfs {
  id                        Int     @id @default(autoincrement())
  originalPdfCid            String
  manifestCid               String
  nodeUuid                  String
  distPdfCid                String
  contentPagePreviewCid     String?
  frontmatterPagePreviewCid String?
  node                      Node    @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, originalPdfCid, manifestCid])
}

// Preview images of distribution PDFs created in prepub flow (first and second pages)
model PdfPreviews {
  id         Int    @id @default(autoincrement())
  nodeUuid   String
  pdfCid     String @unique
  previewMap Json
  node       Node   @relation(fields: [nodeUuid], references: [uuid])

  @@unique([nodeUuid, pdfCid])
}

// The glue between a manifest contributor entry and a nodes profile
model NodeContribution {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  contributorId String    @unique
  nodeId        Int
  userId        Int?
  verified      Boolean   @default(false)
  denied        Boolean   @default(false)
  email         String?
  orcid         String?
  deleted       Boolean   @default(false)
  deletedAt     DateTime?
  inviteSent    Boolean   @default(false)
  node          Node      @relation(fields: [nodeId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])

  @@unique([contributorId, nodeId, userId])
}

model FriendReferral {
  id                     Int                  @id @default(autoincrement())
  uuid                   String               @unique @default(uuid())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  senderUserId           Int
  senderUser             User?                @relation(fields: [senderUserId], references: [id])
  receiverEmail          String
  status                 FriendReferralStatus
  awardedStorage         Boolean              @default(false)
  amountAwardedStorageGb Int                  @default(0)
}

model ResearchFields {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Organization {
  id                String              @unique
  name              String
  userOrganizations UserOrganizations[]

  @@id([id])
}

model UserOrganizations {
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model OrcidProfile {
  id        Int      @id @default(autoincrement())
  orcidId   String   @unique
  updatedAt DateTime @updatedAt
  expiresIn DateTime
  profile   Json

  @@index([orcidId])
}

model UploadJobs {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  uploadType           UploadType
  uploadPayload        Json
  contextPath          String
  storageReference     String? // If using S3, this would be the storage key used
  totalSize            Int?
  totalFiles           Int?
  totalDirs            Int?
  proccessingStartTime DateTime?
  processingEndTime    DateTime?
  processingState      ProcessingState?
  nodeId               Int
  userId               Int
  node                 Node             @relation(fields: [nodeId], references: [id])
  user                 User             @relation(fields: [userId], references: [id])
}

model DocumentStore {
  key   String @id
  value Bytes
}

model DraftNodeTree {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String
  cid       String
  directory Boolean
  size      Int
  external  Boolean
  nodeId    Int
  // userId    Int
  node      Node     @relation(fields: [nodeId], references: [id])
  // user      User     @relation(fields: [userId], references: [id])

  @@unique([nodeId, path])
}

// create a model for Node UUIDs, titles, dates, authors, and abstracts
// NodeFeedItem: Cached entry of a dpid
model NodeFeedItem {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  nodeUuid                String
  nodeUuidHex             String
  nodeDpid10              String                    @unique
  manifestCid             String
  title                   String
  date                    DateTime
  authors                 String
  abstract                String
  nodeFeedItemEndorsement NodeFeedItemEndorsement[]
}

//NodeFeedItemEndorsement: An endorsement of a node feed item from a community
model NodeFeedItemEndorsement {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  nodeDpid10       String
  type             String
  userId           Int
  nodeFeedItemId   Int
  desciCommunityId Int
  user             User           @relation(fields: [userId], references: [id])
  nodeFeedItem     NodeFeedItem   @relation(fields: [nodeFeedItemId], references: [id])
  desciCommunity   DesciCommunity @relation(fields: [desciCommunityId], references: [id])
}

// an organization that endorses work and has members
model DesciCommunity {
  id                        Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  name                      String                      @unique
  slug                      String?                     @unique
  image_url                 String?
  subtitle                  String? // short description
  description               String
  keywords                  String[]
  memberString              String[] // string list of member names
  links                     String[] // string list of links
  hidden                    Boolean                     @default(false)
  members                   User[]
  endorsements              NodeFeedItemEndorsement[]
  CommunityMember           CommunityMember[]
  Attestation               Attestation[]
  NodeAttestation           NodeAttestation[]
  AttestationTemplate       AttestationTemplate[]
  CommunityEntryAttestation CommunityEntryAttestation[]
}

model CommunityMember {
  id          Int                     @id @default(autoincrement())
  communityId Int
  userId      Int
  role        CommunityMembershipRole
  user        User                    @relation(fields: [userId], references: [id])
  community   DesciCommunity          @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
}

// Templates for creating a new attestation
model AttestationTemplate {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  description      String
  image_url        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Attestation      Attestation[]
  DesciCommunity   DesciCommunity? @relation(fields: [desciCommunityId], references: [id])
  desciCommunityId Int?
}

// A factory attestation, these are the base attestations that can be assigned to nodes
model Attestation {
  id                        Int                         @id @default(autoincrement())
  name                      String
  communityId               Int
  description               String
  image_url                 String
  verified_image_url        String?
  templateId                Int?
  protected                 Boolean                     @default(false)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  community                 DesciCommunity              @relation(fields: [communityId], references: [id])
  template                  AttestationTemplate?        @relation(fields: [templateId], references: [id])
  AttestationVersion        AttestationVersion[]
  NodeAttestation           NodeAttestation[]
  CommunityEntryAttestation CommunityEntryAttestation[]

  @@unique([name, communityId])
}

model AttestationVersion {
  id                        Int                         @id @default(autoincrement())
  name                      String
  attestationId             Int
  description               String
  image_url                 String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  attestation               Attestation                 @relation(fields: [attestationId], references: [id])
  NodeAttestation           NodeAttestation[]
  CommunityEntryAttestation CommunityEntryAttestation[]
}

// A communities selected attestations, these appear in their radar.
model CommunityEntryAttestation {
  id                   Int                @id @default(autoincrement())
  desciCommunityId     Int
  desciCommunity       DesciCommunity     @relation(fields: [desciCommunityId], references: [id])
  attestationId        Int
  attestationVersionId Int
  required             Boolean
  attestation          Attestation        @relation(fields: [attestationId], references: [id])
  attestationVersion   AttestationVersion @relation(fields: [attestationVersionId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@unique([attestationId, attestationVersionId, desciCommunityId])
}

//An attestation assigned to a node
model NodeAttestation {
  id                          Int                           @id @default(autoincrement())
  attestationId               Int
  attestation                 Attestation                   @relation(fields: [attestationId], references: [id])
  attestationVersionId        Int
  attestationVersion          AttestationVersion            @relation(fields: [attestationVersionId], references: [id])
  desciCommunityId            Int
  community                   DesciCommunity                @relation(fields: [desciCommunityId], references: [id])
  claimedById                 Int
  claimedBy                   User                          @relation(fields: [claimedById], references: [id])
  nodeDpid10                  String?
  nodeUuid                    String
  node                        Node                          @relation(fields: [nodeUuid], references: [uuid])
  nodeVersion                 Int
  claimedAt                   DateTime                      @default(now())
  revoked                     Boolean                       @default(false)
  revokedAt                   DateTime?
  Annotation                  Annotation[]
  NodeAttestationVerification NodeAttestationVerification[]
  NodeAttestationReaction     NodeAttestationReaction[]
  OrcidPutCodes               OrcidPutCodes[]

  @@unique([nodeUuid, nodeVersion, attestationId, attestationVersionId])
}

//Comments on attestations
model Annotation {
  id                Int             @id @default(autoincrement())
  type              AnnotationType
  body              String
  highlights        Json[]          @default([])
  links             String[]        @default([])
  authorId          Int
  author            User            @relation(fields: [authorId], references: [id])
  nodeAttestationId Int
  attestation       NodeAttestation @relation(fields: [nodeAttestationId], references: [id])
}

//An emoji reaction to a node
model NodeAttestationReaction {
  id                Int             @id @default(autoincrement())
  reaction          String
  authorId          Int
  author            User            @relation(fields: [authorId], references: [id])
  nodeAttestationId Int
  attestation       NodeAttestation @relation(fields: [nodeAttestationId], references: [id])
}

// More prevalent reaction, reputation is staked
model NodeAttestationVerification {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  nodeAttestationId Int
  nodeAttestation   NodeAttestation @relation(fields: [nodeAttestationId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([nodeAttestationId, userId])
}

model PublishTaskQueue {
  id            Int                    @id @default(autoincrement())
  ceramicStream String
  commitId      String
  cid           String
  dpid          String?
  userId        Int
  transactionId String                 @unique
  uuid          String
  status        PublishTaskQueueStatus
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  node          Node                   @relation(fields: [uuid], references: [uuid])
  user          User                   @relation(fields: [userId], references: [id])
}

model OrcidPutCodes {
  id        Int              @id @default(autoincrement())
  orcid     String
  putcode   String?
  reference PutcodeReference @default(PREPRINT)
  claimId   Int?
  record    ORCIDRecord
  userId    Int
  uuid      String
  claim     NodeAttestation? @relation(fields: [claimId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  Node      Node             @relation(fields: [uuid], references: [uuid])

  @@unique([orcid, uuid, reference])
}

model DoiRecord {
  id            Int                  @id @default(autoincrement())
  doi           String               @unique
  dpid          String               @unique
  // add dpid or resource path the doi is registered for
  uuid          String
  node          Node                 @relation(fields: [uuid], references: [uuid])
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  DoiSubmission DoiSubmissionQueue[]
}

model DoiSubmissionQueue {
  id           Int        @id @default(autoincrement())
  batchId      String     @unique
  createdAt    DateTime   @default(now())
  dpid         String
  doiRecordId  Int?
  doi          DoiRecord? @relation(fields: [doiRecordId], references: [id])
  notification Json?
  status       DoiStatus  @default(PENDING)
  uniqueDoi    String     @unique
  uuid         String
  node         Node       @relation(fields: [uuid], references: [uuid])
  updatedAt    DateTime   @updatedAt
}

enum ORCIDRecord {
  WORK
  QUALIFICATION
  EDUCATION
  EMPLOYMENT
}

enum PutcodeReference {
  DATASET
  SOFTWARE
  PREPRINT
}

enum CommunityMembershipRole {
  ADMIN
  MEMBER
}

enum AnnotationType {
  COMMENT
  HIGHLIGHT
}

enum UploadType {
  REGULAR
  EXTERNAL_URL
  EXTERNAL_CID
}

enum ProcessingState {
  STARTED
  FAILED
  COMPLETED
}

enum FriendReferralStatus {
  PENDING
  ACCEPTED
}

// datasetId Int?
// dataset   Dataset? @relation(fields: [datasetId], references: [id])

enum ActionType {
  ORCID_RETRIEVE
  USER_LOGIN
  USER_WALLET_ASSOCIATE
  USER_WALLET_CONNECT
  USER_NODE_VOTE
  WAITLIST_ADD
  RETRIEVE_URL
  RETRIEVE_URL_FAIL
  RETREIVE_URL_SUCCESS
  USER_TERMS_CONSENT
  PUBLISH_NODE
  PUBLISH_NODE_CID_SUCCESS
  PUBLISH_NODE_CID_FAIL
  PUBLISH_NODE_RESEARCH_OBJECT_SUCCESS
  PUBLISH_NODE_RESEARCH_OBJECT_FAIL
  USER_ACTION
  NEW_REFERRAL
  ACCEPTED_REFERRAL
  USER_PUBLISH_CONSENT
  CLAIM_ATTESTATION
  REVOKE_CLAIM
  CLAIM_ENTRY_ATTESTATIONS
  ADD_COMMENT
  REMOVE_COMMENT
  VERIFY_ATTESTATION
  UNVERIFY_ATTESTATION
  UPDATE_ORCID_RECORD
  REMOVE_ORCID_WORK_RECORD
  ORCID_API_ERROR
  // AUTOMATE_METADATA
}

enum ChainTransactionType {
  NODE_MINT
  NODE_UPDATE
  NODE_VOTE
}

enum NodeState {
  NEW
  PENDING_DAO_APPROVAL
  DAO_APPROVED
  PENDING_VALIDATION
  VALIDATED
  WITHDRAWN
}

enum DataType {
  DATA_BUCKET
  MANIFEST
  UNKNOWN
  DATASET
  IMAGES
  VIDEOS
  CODE_REPOS
  DOCUMENT
}

enum PublishState {
  WAITING
  PENDING
  SUCCESS
  FAILED
}

enum PublishTaskQueueStatus {
  WAITING
  PENDING
  FAILED
}

enum AuthTokenSource {
  ORCID
}

enum DoiStatus {
  PENDING
  FAILED
  SUCCESS
}
