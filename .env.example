NODE_ENV=dev

PORT=5420

# Kubo RPC endpoints
IPFS_NODE_URL=http://host.docker.internal:5001
PUBLIC_IPFS_RESOLVER=http://host.docker.internal:5002

# Kubo path gateway endpoint
IPFS_RESOLVER_OVERRIDE=http://host.docker.internal:8089/ipfs

### Database - Postgres
PG_HOST=db_boilerplate
PG_PORT=5432
POSTGRES_USER=walter
POSTGRES_PASSWORD=white
POSTGRES_DB=boilerplate
DATABASE_URL=postgresql://walter:white@db_boilerplate:5432/boilerplate

### JWT
JWT_SECRET=secretshhh
JWT_EXPIRATION=

SESSION_KEY=

# log4j Levels: trace, debug, info, warn, error, fatal
PINO_LOG_LEVEL=trace

### Redis Cache
REDIS_HOST=host.docker.internal
REDIS_PORT=6379
REDIS_URL=redis://host.docker.internal:6379

# LOCAL DEV
MNEMONIC=test test test test test test test test test test test junk
# http://localhost:1984
#
# LIVE:
# host: 'arweave.net',
# port: 443,
# protocol: 'https'
#
ARWEAVE_ENABLED=0
ARWEAVE_HOST=
ARWEAVE_PORT=
ARWEAVE_PROTOCOL=

## generate here: npx ts-node desci-server/src/utils/generateArweaveKeys.ts
ARWEAVE_PUBKEY=
# base64-encoded private key JSON stringified object (https://docs.arweave.org/developers/server/http-api#key-format)
ARWAVE_SECRET_PRIVATE_KEY_SECRET=

COOKIE_DOMAIN=

ESTUARY_API_KEY=
ESTUARY_API_URL=https://api.estuary.tech

SERVER_URL=http://localhost:5420
DAPP_URL=http://localhost:3000
THEGRAPH_API_URL=http://host.docker.internal:8000/subgraphs/name/nodes

# set to true if need to send email
SHOULD_SEND_EMAIL=
SENDGRID_API_KEY=

# S3 Bucket
AWS_S3_BUCKET_NAME=
AWS_S3_BUCKET_REGION=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# for faucet
HOT_WALLET_KEY=

# for upgrading legacy dPID's (default is ganache account #1 for local dev)
REGISTRY_OWNER_PKEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

# https://cso-classifier.internal
CSO_CLASSIFIER_API=
# vscode runnable
VSCODE_ACCESS_TOKEN=

# nodes media server (DOI resolution, video transcoding, LaTeX -> PDF Conversion)
NODES_MEDIA_SERVER_URL=http://host.docker.internal:5454

# honeycomb.io telemetry
OTEL_SERVICE_NAME=
HONEYCOMB_API_KEY=
DISCORD_NOTIFICATIONS_WEBHOOK_URL=
DISCORD_NOTIFICATIONS_DOI_WEBHOOK_URL=

# for sending nodes cover cid to media servers
# must match value in nodes-media/.env
MEDIA_SECRET_KEY=supersecret

ORCID_API_DOMAIN=sandbox.orcid.org
ORCID_CLIENT_ID=
ORCID_CLIENT_SECRET=

REPO_SERVER_URL=http://host.docker.internal:5484
REPO_SERVICE_SECRET_KEY=secretrepo

# To run bootstrapCeramic.sh, you need the admin seed for the model IDs to be the same
CERAMIC_ADMIN_SEED=

# ISOLATED MEDIA SERVER
ISOLATED_MEDIA_SERVER_URL=http://media_isolated:7771
IPFS_READ_ONLY_GATEWAY_SERVER=http://host.docker.internal:8089/ipfs # Used to proxy ipfs requests for ISOLATED_MEDIA_SERVER

# SET TO 1 to run communities seed script
RUN=1

# Enable google api functionalities
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET= # Unnecessary for now, not doing serverside 2step
GOOGLE_DEV_API_KEY=   # Unnecessary for now, not doing serverside 2step

## Configure RPC nodes (open an issue/ping us to access DeSci Labs' nodes)
ETHEREUM_RPC_URL=http://host.docker.internal:8545

# Use this for Sepolia testnet
# ETHEREUM_RPC_URL=https://eth-sepolia.g.alchemy.com/v2/demo

# Use resolver in compose cluster locally
DPID_URL_OVERRIDE=http://host.docker.internal:5460
# Use public dev resolver
# DPID_URL_OVERRIDE=https://dev-beta.dpid.org

# Set to true if you want to mute the publish worker in local dev
MUTE_PUBLISH_WORKER=false
# SingleNodeLockServce
MAX_LOCK_TIME=3600 # 1 hour

DOI_PREFIX=10.62891
CROSSREF_DOI_URL=https://doi.org

# Cross ref api
CROSSREF_METADATA_API=https://test.crossref.org/servlet/deposit
CROSSREF_ADMIN_API=https://test.crossref.org
CROSSREF_EMAIL=
CROSSREF_LOGIN=
CROSSREF_LOGIN_ROLE=
CROSSREF_PASSWORD=

# Cross ref notification callback envs
CROSSREF_NOTIFY_ENDPOINT=endpoint

# Automated metadata
AUTOMATED_METADATA_API=http://host.docker.internal:5005
AUTOMATED_METADATA_API_KEY=

# Elastic Search, required for /v1/search endpoints
ELASTIC_SEARCH_NODE_URL=
ELASTIC_SEARCH_USER=
ELASTIC_SEARCH_PW=

# Elastic search local dev node configuration
ES_NODE=http://host.docker.internal:9200
ES_DB_HOST=
ES_DB_PORT=
ES_DB_NAME=
ES_DB_USER=
ES_DB_PASSWORD=

### open Alex Database - Postgres
OPEN_ALEX_DATABASE_URL=postgresql://username:password@host/database?schema=openalex

CLOUDFLARE_WORKER_API=http://host.docker.internal:5445
CLOUDFLARE_WORKER_API_SECRET=auth-token
ENABLE_WORKERS_API=true
