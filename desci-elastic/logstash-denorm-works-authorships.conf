input {
  jdbc {
    jdbc_driver_library => "/opt/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${ES_DB_HOST}:${ES_DB_PORT}/${ES_DB_NAME}"
    jdbc_user => "${ES_DB_USER}"
    jdbc_password => "${ES_DB_PASSWORD}"
    jdbc_paging_enabled => true
    jdbc_page_size => 100
    use_column_value => true
    tracking_column => "publication_date"
    tracking_column_type => "timestamp"
    last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run"
    statement => "
      SELECT
        w.id::TEXT AS work_id,
        w.doi::TEXT,
        w.title::TEXT,
        w.publication_year::TEXT,
        w.type::TEXT,
        w.cited_by_count::TEXT AS cited_by_count,
        w.abstract_inverted_index::TEXT as abstract_inverted_index,
        w.publication_date::TIMESTAMP AS publication_date
      FROM openalex.works w
      WHERE w.publication_date::TIMESTAMP > CAST(:sql_last_value AS TIMESTAMP)
      ORDER BY w.publication_date::TIMESTAMP ASC, w.id ASC
      LIMIT 100
    "
    codec => json
  }
}

filter {
  mutate {
    remove_field => ["@version", "@timestamp"]
  }
  json {
    source => "abstract_inverted_index"
    target => "abstract_inverted_index_parsed"
  }
  ruby {
    code => '
      abstract_inverted_index = event.get("abstract_inverted_index_parsed")
      if abstract_inverted_index
        abstract_length = abstract_inverted_index.values.flatten.max + 1
        abstract_words = Array.new(abstract_length, "")
        abstract_inverted_index.each do |word, positions|
          positions.each do |position|
            abstract_words[position] = word
          end
        end
        abstract = abstract_words.join(" ")
        event.set("abstract", abstract)
      end
    '
  }
  mutate {
    remove_field => ["abstract_inverted_index", "abstract_inverted_index_parsed"]
    convert => {
      "cited_by_count" => "integer"
      "publication_year" => "integer"
    }
  }
  jdbc_streaming {
    jdbc_driver_library => "/opt/logstash/drivers/postgresql-42.7.3.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://${ES_DB_HOST}:${ES_DB_PORT}/${ES_DB_NAME}"
    jdbc_user => "${ES_DB_USER}"
    jdbc_password => "${ES_DB_PASSWORD}"
    statement => "
      SELECT
        a.id AS author_id,
        wa.author_position,
        a.display_name AS author_name,
        a.works_count AS author_works_count,
        a.cited_by_count AS author_cited_by_count,
        wa.institution_id,
        a.orcid
      FROM openalex.works_authorships wa
      JOIN openalex.authors a ON wa.author_id = a.id
      WHERE wa.work_id = :work_id
      ORDER BY wa.author_position ASC
    "
    parameters => { "work_id" => "work_id" }
    target => "authors"
  }
}

output {
  stdout { codec => json }
  elasticsearch {
    hosts => ["${ES_NODE}"]
    index => "denormalized_works_test2"
    document_id => "%{[work_id]}"
    doc_as_upsert => true
  }
}