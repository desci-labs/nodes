apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: retained-standard
provisioner: kubernetes.io/aws-ebs
reclaimPolicy: Retain
parameters:
  type: gp3
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ceramic-one-env
data:
  CERAMIC_ONE_STORE_DIR: "/data/ceramic-one"
  CERAMIC_ONE_P2P_KEY_DIR: "/data/ceramic-one"
  CERAMIC_ONE_BIND_ADDRESS: "0.0.0.0:5101"
  CERAMIC_ONE_SWARM_ADDRESSES: "/ip4/0.0.0.0/tcp/4101,/ip4/0.0.0.0/udp/4101/quic-v1"
  CERAMIC_ONE_METRICS_BIND_ADDRESS: "0.0.0.0:9465"
  CERAMIC_ONE_LOCAL_NETWORK_ID: "0"
  CERAMIC_ONE_NETWORK: "testnet-clay"
  RUST_LOG: "info,ceramic_one=debug,multipart=error"
  CERAMIC_ONE_LOG_FORMAT: "json"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: js-ceramic-env
data:
  NODE_ENV: "production"
  CERAMIC_NETWORK: "testnet-clay"
  CERAMIC_STATE_STORE_PATH: "/js-ceramic-data/statestore"
  CERAMIC_CORS_ALLOWED_ORIGINS: ".*"
  CERAMIC_LOG_LEVEL: "2"
  CERAMIC_IPFS_HOST: "http://localhost:5101"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ceramic-init
data:
  # TODO: add anchor.authMethod and node.privateSeedUrl to config when duplicating for prod
  daemon-config.json: |
    {
      "anchor": {
        "ethereum-rpc-url": "${ANCHOR_RPC_URL}"
      },
      "http-api": {
          "cors-allowed-origins": [
              "${CERAMIC_CORS_ALLOWED_ORIGINS}"
          ],
          "admin-dids": [
              "${CERAMIC_ADMIN_DID}"
          ]
      },
      "ipfs": {
          "mode": "remote",
          "host": "${CERAMIC_IPFS_HOST}"
      },
      "logger": {
          "log-level": ${CERAMIC_LOG_LEVEL},
          "log-to-files": false
      },
      "metrics": {
          "metrics-exporter-enabled": false,
          "prometheus-exporter-enabled": true,
          "prometheus-exporter-port": 9464
      },
      "network": {
          "name": "${CERAMIC_NETWORK}"
      },
      "node": {},
      "state-store": {
          "mode": "fs",
          "local-directory": "${CERAMIC_STATE_STORE_PATH}"
      },
      "indexing": {
          "db": "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}/${POSTGRES_DB}",
          "allow-queries-before-historical-sync": true
      }
    }

  js-ceramic-init.sh: |
    #!/bin/bash

    set -eo pipefail

    source /vault/secrets/config

    export CERAMIC_ADMIN_DID=$(composedb did:from-private-key ${CERAMIC_ADMIN_PRIVATE_KEY})

    envsubst \
      < /ceramic-init/daemon-config.json \
      > /config/daemon-config.json

    echo "Config file generated successfully"

  get-external-multiaddr.sh: |
    #!/bin/bash

    set -eo pipefail

    MY_POD_INDEX=$(echo $HOSTNAME | grep -o '[0-9]\+$')
    TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    NAMESPACE=default
    
    LB_DOMAIN=$(curl -s --header "Authorization: Bearer $TOKEN" \
        --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
        https://kubernetes.default.svc/api/v1/namespaces/$NAMESPACE/services/ceramic-recon-dev-$MY_POD_INDEX-public \
      | grep -oE "k8s-.*.elb.*.amazonaws.com")

    if [ -z "$LB_DOMAIN" ]; then
      echo "Failed to query for LB_DOMAIN"
      exit 1
    fi

    EXTERNAL_MULTIADDR="/dns4/${LB_DOMAIN}/tcp/4101,/dns4/${LB_DOMAIN}/udp/4101/quic-v1"
    echo -n "$EXTERNAL_MULTIADDR" > /config/external-multiaddr
    echo "Wrote $EXTERNAL_MULTIADDR to /config/external-multiaddr"
---

# Stateful set for pairs of js-ceramic & ceramic-one
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ceramic-recon-dev
  labels:
    App: CeramicReconDev
spec:
  serviceName: ceramic-recon-dev
  replicas: 1
  selector:
    matchLabels:
      App: CeramicReconDev
  template:
    metadata:
      labels:
        App: CeramicReconDev
      annotations:
        # inject vault agent container
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: app-vault-reader
        # only run as init container; don't linger as a sidecar
        vault.hashicorp.com/agent-pre-populate-only: "true"
        # run before other init containers
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject-secret-config: "secrets/ceramic/dev"
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "secrets/ceramic/dev" -}}
          {{- range $k, $v := .Data }}
          export {{ $k }}={{ $v }}
          {{- end }}
          {{- end }}
    spec:
      serviceAccountName: "vault-auth"
      containers:
        - name: js-ceramic
          image: ceramicnetwork/js-ceramic:6.5.0
          command:
            - /js-ceramic/packages/cli/bin/ceramic.js
            - daemon
            - --config
            - /config/daemon-config.json
          env:
            - name: BASH_ENV
              value: /vault/secrets/config
          envFrom:
            - configMapRef:
                name: js-ceramic-env
          ports:
            - name: http-api
              containerPort: 7007
              protocol: TCP
            - name: metrics
              containerPort: 9464
              protocol: TCP
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 1
              memory: 4Gi
          livenessProbe:
            httpGet:
              path: /api/v0/node/healthcheck
              port: http-api
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v0/node/healthcheck
              port: http-api
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 10
          volumeMounts:
            - mountPath: /config
              name: config-volume
            - mountPath: /js-ceramic-data
              name: js-ceramic-data

        - name: ceramic-one
          image: public.ecr.aws/r5b3e0r5/3box/ceramic-one:0.39.0
          command: [ "bash", "-c" ]
          args: [ 'ceramic-one daemon --external-swarm-addresses="$(< /config/external-multiaddr)"']
          env:
            - name: BASH_ENV
              value: /vault/secrets/config
          envFrom:
            - configMapRef:
                name: ceramic-one-env
          ports:
            - containerPort: 4101
              name: swarm-tcp
              protocol: TCP
            - containerPort: 4101
              name: swarm-udp
              protocol: UDP
            - containerPort: 5101
              name: rpc
              protocol: TCP
            - containerPort: 9465
              name: metrics
              protocol: TCP
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 1
              memory: 1Gi
          livenessProbe:
            httpGet:
              path: /ceramic/liveness
              port: rpc
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /ceramic/liveness
              port: rpc
              scheme: HTTP
          volumeMounts:
            - name: ceramic-one-data
              mountPath: /data/ceramic-one
            - name: config-volume
              mountPath: /config

      initContainers:
        - name: init-ceramic-config
          command: [ "bash", "-c" ]
          args: [ "/ceramic-init/js-ceramic-init.sh && /ceramic-init/get-external-multiaddr.sh" ]
          env:
            - name: BASH_ENV
              value: /vault/secrets/config
          envFrom:
            - configMapRef:
                name: js-ceramic-env
          image: ceramicnetwork/composedb-cli
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: /config
              name: config-volume
            - mountPath: /ceramic-init
              name: ceramic-init

      volumes:
          # holds the config file during the lifetime of the pod
        - emptyDir: {}
          name: config-volume
          # set 755 on files to allow executing init script
        - configMap:
            defaultMode: 493
            name: ceramic-init
          name: ceramic-init
        - configMap:
            name: ceramic-one-env
          name: ceramic-one-env
        - name: js-ceramic-data
          persistentVolumeClaim:
            claimName: js-ceramic-data

  volumeClaimTemplates:
    - metadata:
        name: js-ceramic-data
        labels:
          App: CeramicReconDev
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: retained-standard
        resources:
          requests:
            storage: 100Gi

    - metadata:
        name: ceramic-one-data
        labels:
          App: CeramicReconDev
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: retained-standard
        resources:
          requests:
            storage: 100Gi
---

# headless service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: ceramic-recon-dev
  labels:
    App: CeramicReconDev
spec:
  clusterIP: None
  selector:
    App: CeramicReconDev
  ports:
    - port: 7007
      name: http-api
    - port: 4101
      name: swarm-tcp
      protocol: TCP
    - port: 4101
      name: swarm-udp
      protocol: UDP
    - port: 5101
      name: rpc
    - port: 9464
      name: js-metrics
    - port: 9465
      name: one-metrics
---

# individual services (add/remove when scaling)
# 0
apiVersion: v1
kind: Service
metadata:
  name: ceramic-recon-dev-0-internal
  labels:
    App: CeramicReconDev
spec:
  type: ClusterIP
  selector:
    App: CeramicReconDev
    statefulset.kubernetes.io/pod-name: ceramic-recon-dev-0
  ports:
    - port: 80
      name: http-api
      targetPort: http-api
    - port: 4101
      name: swarm-tcp
      protocol: TCP
      targetPort: swarm-tcp
    - port: 4101
      name: swarm-udp
      protocol: UDP
      targetPort: swarm-udp
    - port: 5101
      name: rpc
      targetPort: rpc
    - port: 9464
      name: js-metrics
      targetPort: js-metrics
    - port: 9465
      name: one-metrics
      targetPort: one-metrics
---
apiVersion: v1
kind: Service
metadata:
  name: ceramic-recon-dev-0-public
spec:
  type: LoadBalancer
  selector:
    App: CeramicReconDev
    statefulset.kubernetes.io/pod-name: ceramic-recon-dev-0
  ports:
    - port: 80
      name: http-api
      targetPort: http-api
    - port: 4101
      name: swarm-tcp
      protocol: TCP
      targetPort: swarm-tcp
    - port: 4101
      name: swarm-udp
      protocol: UDP
      targetPort: swarm-udp
