version: "3"

networks:
  redis-cluster-compose:
    driver: bridge

services:
  db_postgres:
    container_name: "db_boilerplate"
    image: "postgres:12.6-alpine"
    restart: always
    # healthcheck:
    #   test: "pg_isready -h host.docker.internal -p 5433 -U walter"
    #   interval: 5s
    #   timeout: 15s
    #   retries: 5
    env_file:
      - .env
    ports:
      - "5433:5432"
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    volumes:
      - ./local-data/database/boilerplate:/var/lib/postgresql/data/
    environment:
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
  desci_blockchain_ganache:
    container_name: "desci_blockchain_ganache"
    build: ./desci-contracts
    restart: always
    ports:
      - "8545:8545"
    env_file:
      - .env
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./local-data/ganache:/data
      - ./desci-contracts/.openzeppelin:/app/.openzeppelin
    depends_on:
      - graph_node
  desci_nodes_backend:
    entrypoint: /bin/sh './desci-server/scripts/be-node-dev.sh'
    env_file:
      - .env
    ports:
      - "5420:5420"
      - "9229:9229"
      - "5555:5555"
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - db_postgres
      - desci_blockchain_ganache
      - graph_node
      - redis-cluster-creator
      # - nodes_media # UNCOMMENT FOR LOCAL DEV OF nodes-media
    links:
      - db_postgres
    volumes:
      - ./local-data/yarn_cache:/root/.yarn
  block_explorer_dev:
    image: sinaiman/expedition-dev:latest
    ports:
      - "3001:80"
  graph_node:
    image: graphprotocol/graph-node
    restart: always
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      - ipfs
      - db_postgres
    environment:
      # https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md
      postgres_host: db_postgres
      # postgres_port: 5433
      postgres_user: walter
      postgres_pass: white
      postgres_db: postgres
      ipfs: "host.docker.internal:5001"
      ethereum: "ganache:http://host.docker.internal:8545"
      # see levels here https://docs.rs/env_logger/0.6.0/env_logger/
      GRAPH_LOG: info
      RUST_BACKTRACE: 1
      GRAPH_MAPPING_HANDLER_TIMEOUT: 10
      # GRAPH_ETHEREUM_FETCH_TXN_RECEIPTS_IN_BATCHES: true
      GRAPH_IPFS_TIMEOUT: 10
      # ENABLE_GRAPHQL_VALIDATIONS: true
      # GRAPH_QUERY_CACHE_BLOCKS: 0
      # GRAPH_LOG_POI_EVENTS: true
      # GRAPH_LOAD_THRESHOLD: 250
      # EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
  ipfs:
    image: ipfs/go-ipfs:v0.13.0
    environment:
      IPFS_SWARM_KEY: "/key/swarm/psk/1.0.0/\n/base16/\n9d002c50635a479d29dcc0ccb49d862952a0dcc52baddd253167adcd496c8d04"
    ports:
      - "5001:5001"
      - "8089:8080"
    volumes:
      - ./local-data/ipfs:/data/ipfs
    healthcheck:
      test: ipfs ls QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 2s


  redis-node-1:
    image: "redis:7-alpine"
    ports:
      - 7000:7000
    networks:
      - redis-cluster-compose
    hostname: redis-node-1
    volumes:
      - ./local-data/redis/7001:/redis
    command: redis-server /redis/redis.conf
  redis-node-2:
    image: "redis:7-alpine"
    ports:
      - 7001:7001
    networks:
      - redis-cluster-compose
    hostname: redis-node-2
    volumes:
      - ./local-data/redis/7001:/redis
    command: redis-server /redis/redis.conf
  redis-insight:
    image: redislabs/redisinsight
    ports:
      - 8199:8001
    networks:
      - redis-cluster-compose
    volumes:
      - ./local-data/redisinsight:/db
    depends_on:
      - redis-cluster-creator
  redis-cluster-creator:
    image: redis:latest
    ports:
      - 6937:6999
    networks:
      - redis-cluster-compose
    command: redis-cli -p 7000 --cluster create redis-node-1:7000 redis-node-2:7001 --cluster-replicas 1 --cluster-yes
    depends_on:
      - redis-node-1
      - redis-node-2


  # desci_nodes_backend_test:
  #   container_name: 'be_test_boilerplate'
  #   command: echo 'Test container ready'
  #   build: .
  #   stdin_open: true
  #   tty: true
  #   depends_on:
  #     - db_postgres
  #   links:
  #     - db_postgres
  #   env_file:
  #     - .envs
  #   volumes:
  #     - .:/app/
  #     - /app/node_modules
