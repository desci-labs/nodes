version: "3"

services:
  db_postgres:
    container_name: "db_boilerplate"
    image: "postgres:12.6-alpine"
    restart: always
    healthcheck:
      test: "pg_isready -U walter -d postgres"
      interval: 5s
      timeout: 15s
      retries: 5
    env_file:
      - .env
    ports:
      - "5433:5432"
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    volumes:
      - ./local-data/database/boilerplate:/var/lib/postgresql/data/
    environment:
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
      POSTGRES_PASSWORD: 'white'
    networks:
        - backend-network

  desci_blockchain_ganache:
    container_name: "desci_blockchain_ganache"
    build: ./desci-contracts
    restart: always
    healthcheck:
      test: curl -sf -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' localhost:8545
      interval: 10s
      timeout: 15s
      retries: 10
    ports:
      - "8545:8545"
    env_file:
      - .env
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./local-data/ganache:/data
      - ./desci-contracts/.openzeppelin:/app/.openzeppelin
    depends_on:
      graph_node:
        condition:
          service_started
      db_postgres:
        condition:
          service_healthy
    networks:
      - backend-network

  desci_nodes_backend:
    container_name: "desci_nodes_backend"
    entrypoint: /bin/sh './desci-server/scripts/be-node-dev.sh'
    env_file:
      - .env
    ports:
      - "5420:5420"
      - "9229:9229"
      - "5555:5555"
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      db_postgres:
        condition:
          service_healthy
      desci_blockchain_ganache:
        condition:
          service_healthy
      graph_node:
        condition:
          service_started
      redis-cluster-creator:
        condition:
          service_started
      # - nodes_media # UNCOMMENT FOR LOCAL DEV OF nodes-media
    links:
      - db_postgres
    volumes:
      - ./local-data/yarn_cache:/root/.yarn
    networks:
      - backend-network
      - redis-cluster-compose

  block_explorer_dev:
    image: sinaiman/expedition-dev:latest
    container_name: "block_explorer"
    ports:
      - "3001:80"

  graph_node:
    image: graphprotocol/graph-node
    container_name: "graph_node"
    restart: always
    # healthcheck:
    #   test: "pg_isready -U walter -d postgres"
    #   interval: 5s
    #   timeout: 15s
    #   retries: 5
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      ipfs:
        condition:
          service_healthy
      db_postgres:
        condition:
          service_healthy
    environment:
      # https://github.com/graphprotocol/graph-node/blob/master/docs/environment-variables.md
      postgres_host: db_postgres
      # postgres_port: 5433
      postgres_user: walter
      postgres_pass: white
      postgres_db: postgres
      ipfs: "host.docker.internal:5001"
      ethereum: "ganache:http://host.docker.internal:8545"
      # see levels here https://docs.rs/env_logger/0.6.0/env_logger/
      GRAPH_LOG: info
      RUST_BACKTRACE: 1
      GRAPH_MAPPING_HANDLER_TIMEOUT: 10
      # GRAPH_ETHEREUM_FETCH_TXN_RECEIPTS_IN_BATCHES: true
      GRAPH_IPFS_TIMEOUT: 10
      # ENABLE_GRAPHQL_VALIDATIONS: true
      # GRAPH_QUERY_CACHE_BLOCKS: 0
      # GRAPH_LOG_POI_EVENTS: true
      # GRAPH_LOAD_THRESHOLD: 250
      # EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
    networks:
      - backend-network

  ipfs:
    image: ipfs/go-ipfs:v0.13.0
    container_name: "ipfs"
    environment:
      IPFS_SWARM_KEY: "/key/swarm/psk/1.0.0/\n/base16/\n9d002c50635a479d29dcc0ccb49d862952a0dcc52baddd253167adcd496c8d04"
    ports:
      - "5001:5001"
      - "8089:8080"
    volumes:
      - ./local-data/ipfs:/data/ipfs
    healthcheck:
      test: ipfs ls QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1
      interval: 5s
      retries: 5
      start_period: 10s
      timeout: 2s
    networks:
      - backend-network

  redis-node-1:
      image: "redis:7-alpine"
      ports:
        - 7000:7000
      networks:
        - redis-cluster-compose
      hostname: redis-node-1
      volumes:
        # - ./local-data/redis/7001:/redis
        - ./redis/redis.conf:/redis/redis.conf
      command: "sh -c 'mkdir -p /redis && redis-server /redis/redis.conf --port 7000'"

  redis-node-2:
      image: "redis:7-alpine"
      ports:
        # - "6379:6379"
        - 7001:7001
      networks:
        - redis-cluster-compose
      hostname: redis-node-2
      volumes:
        - ./redis/redis.conf:/redis/redis.conf
        # - ./local-data/redis:/data
        # - ./local-data/redis/7001:/redis
      command: "sh -c 'mkdir -p /redis && redis-server /redis/redis.conf --port 7001'"

  redis-node-3:
      image: "redis:7-alpine"
      ports:
        # - "6379:6379"
        - 7002:7002
      networks:
        - redis-cluster-compose
      hostname: redis-node-3
      volumes:
        - ./redis/redis.conf:/redis/redis.conf
        # - ./local-data/redis:/data
        # - ./local-data/redis/7001:/redis
      command: "sh -c 'mkdir -p /redis && redis-server /redis/redis.conf --port 7002'"

  redis-cluster-creator:
      image: redis:latest
      networks:
        - redis-cluster-compose
      command: redis-cli -p 7000 --cluster create redis-node-1:7000 redis-node-2:7001 redis-node-3:7002 --cluster-replicas 0 --cluster-yes
      depends_on:
        - redis-node-1
        - redis-node-2
        - redis-node-3
        
  redis-insight:
      image: redislabs/redisinsight
      ports:
        - 8337:8001
      networks:
        - redis-cluster-compose
      volumes:
        - ./local-data/redisinsight:/db
      depends_on:
        - redis-cluster-creator
        

networks:
  backend-network:
    driver: bridge
  redis-cluster-compose:
    driver: bridge
        